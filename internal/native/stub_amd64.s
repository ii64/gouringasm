// +build !noasm !appengine
// Code generated by golinker, DO NOT EDIT.
// Command: golinker -fallback-rawbytes-x86 -rawbytes-x86 -extsymstub -stub=./internal/native/stub.go -out=./internal/native -entryname=__native_entry__ ./native/dist/libnative-amd64.a

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

// native size: 11135

TEXT ·__native_entry__(SB), NOSPLIT, $0
	NO_LOCAL_POINTERS

__subr_native_entry__off_0:
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff	// leaq -7(%rip), %rax	// LEAQ -0x7(RIP), AX

_lbl_7:
	LONG $0x24448948; BYTE $0x10	// movq %rax, 0x10(%rsp)	// MOVQ AX, 0x10(SP)

_lbl_c:
	BYTE $0xc3	// retq	// RET 

__subr_____native_entry___aligner16_3__13__off_13:
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_queue_mmap__off_16:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP

_lbl_11:
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP

_lbl_14:
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP

_lbl_18:
	WORD $0x7d89; BYTE $0xfc	// movl %edi, -4(%rbp)	// MOVL DI, -0x4(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)

_lbl_1f:
	LONG $0xe8558948	// movq %rdx, -0x18(%rbp)	// MOVQ DX, -0x18(BP)
	LONG $0xe87d8b48	// movq -0x18(%rbp), %rdi	// MOVQ -0x18(BP), DI
	WORD $0xf631	// xorl %esi, %esi	// XORL SI, SI
	LONG $0xd8ba; BYTE $0x0	// movl $0xd8, %edx	// MOVL $0xd8, DX
	LONG $0x27bde8; BYTE $0x0	// callq 0x27f0	// CALL ·__native_entry__+10224(SB)
	WORD $0x7d8b; BYTE $0xfc	// movl -4(%rbp), %edi	// MOVL -0x4(BP), DI
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	LONG $0xe8558b48	// movq -0x18(%rbp), %rdx	// MOVQ -0x18(BP), DX
	LONG $0xe84d8b48	// movq -0x18(%rbp), %rcx	// MOVQ -0x18(BP), CX
	LONG $0x68c18348	// addq $0x68, %rcx	// ADDQ $0x68, CX
	LONG $0x55e8; BYTE $0x0	// callq 0xa0	// CALL ·__native_entry__+160(SB)
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0xe47d83	// cmpl $0, -0x1c(%rbp)	// CMPL -0x1c(BP), $0x0
	LONG $0x33850f; WORD $0x0	// jne 0x8b	// JNE _lbl_8b
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x488b; BYTE $0x8	// movl 8(%rax), %ecx	// MOVL 0x8(AX), CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xc08889; WORD $0x0	// movl %ecx, 0xc0(%rax)	// MOVL CX, 0xc0(AX)
	WORD $0x4d8b; BYTE $0xfc	// movl -4(%rbp), %ecx	// MOVL -0x4(BP), CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX

_lbl_70:
	LONG $0xcc8889; WORD $0x0	// movl %ecx, 0xcc(%rax)	// MOVL CX, 0xcc(AX)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xc48889; WORD $0x0	// movl %ecx, 0xc4(%rax)	// MOVL CX, 0xc4(AX)

_lbl_80:
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xd080c6; WORD $0x0; BYTE $0x0	// movb $0, 0xd0(%rax)	// MOVB $0x0, 0xd0(AX)

_lbl_8b:
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x9066	// nop	// NOP 

__subr_io_uring_mmap__off_160:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x30ec8348	// subq $0x30, %rsp	// SUBQ $0x30, SP
	WORD $0x7d89; BYTE $0xf8	// movl %edi, -8(%rbp)	// MOVL DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	LONG $0xe8558948	// movq %rdx, -0x18(%rbp)	// MOVQ DX, -0x18(BP)
	LONG $0xe04d8948	// movq %rcx, -0x20(%rbp)	// MOVQ CX, -0x20(BP)
	QUAD $0x10d845c748	// movq $0x10, -0x28(%rbp)	// MOVQ $0x10, -0x28(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x8	// movl 8(%rax), %eax	// MOVL 0x8(AX), AX
	LONG $0x80025; BYTE $0x0	// andl $0x800, %eax	// ANDL $0x800, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0xc840f; WORD $0x0	// je 0xe0	// JE _lbl_e0
	LONG $0xd8458b48	// movq -0x28(%rbp), %rax	// MOVQ -0x28(BP), AX
	LONG $0x10c08348	// addq $0x10, %rax	// ADDQ $0x10, AX
	LONG $0xd8458948	// movq %rax, -0x28(%rbp)	// MOVQ AX, -0x28(BP)

_lbl_e0:
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x40	// movl 0x40(%rax), %eax	// MOVL 0x40(AX), AX
	WORD $0xc189	// movl %eax, %ecx	// MOVL AX, CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	LONG $0x2e0c148	// shlq $2, %rax	// SHLQ $0x2, AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x48488948	// movq %rcx, 0x48(%rax)	// MOVQ CX, 0x48(AX)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x64	// movl 0x64(%rax), %eax	// MOVL 0x64(AX), AX
	WORD $0xc189	// movl %eax, %ecx	// MOVL AX, CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x4	// movl 4(%rax), %eax	// MOVL 0x4(AX), AX
	LONG $0x45af0f48; BYTE $0xd8	// imulq -0x28(%rbp), %rax	// IMULQ -0x28(BP), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x38488948	// movq %rcx, 0x38(%rax)	// MOVQ CX, 0x38(AX)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x14	// movl 0x14(%rax), %eax	// MOVL 0x14(AX), AX
	WORD $0xe083; BYTE $0x1	// andl $1, %eax	// ANDL $0x1, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x36840f; WORD $0x0	// je 0x167	// JE _lbl_167
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x38408b48	// movq 0x38(%rax), %rax	// MOVQ 0x38(AX), AX
	LONG $0xe84d8b48	// movq -0x18(%rbp), %rcx	// MOVQ -0x18(BP), CX
	LONG $0x48413b48	// cmpq 0x48(%rcx), %rax	// CMPQ AX, 0x48(CX)
	LONG $0x10860f; WORD $0x0	// jbe 0x157	// JBE _lbl_157
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x38488b48	// movq 0x38(%rax), %rcx	// MOVQ 0x38(AX), CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x48488948	// movq %rcx, 0x48(%rax)	// MOVQ CX, 0x48(AX)

_lbl_157:
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x48488b48	// movq 0x48(%rax), %rcx	// MOVQ 0x48(AX), CX
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x38488948	// movq %rcx, 0x38(%rax)	// MOVQ CX, 0x38(AX)

_lbl_167:
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x48708b48	// movq 0x48(%rax), %rsi	// MOVQ 0x48(AX), SI
	LONG $0xf8458b44	// movl -8(%rbp), %r8d	// MOVL -0x8(BP), R8
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x8941; BYTE $0xc1	// movl %eax, %r9d	// MOVL AX, R9
	LONG $0x3ba; BYTE $0x0	// movl $3, %edx	// MOVL $0x3, DX
	LONG $0x8001b9; BYTE $0x0	// movl $0x8001, %ecx	// MOVL $0x8001, CX
	WORD $0x894c; BYTE $0xcf	// movq %r9, %rdi	// MOVQ R9, DI
	LONG $0xbd6e8; BYTE $0x0	// callq 0xd60	// CALL ·__native_entry__+3424(SB)
	WORD $0x8948; BYTE $0xc1	// movq %rax, %rcx	// MOVQ AX, CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x50488948	// movq %rcx, 0x50(%rax)	// MOVQ CX, 0x50(AX)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x50788b48	// movq 0x50(%rax), %rdi	// MOVQ 0x50(AX), DI
	LONG $0xc2ee8; BYTE $0x0	// callq 0xdd0	// CALL ·__native_entry__+3536(SB)
	WORD $0x1a8	// testb $1, %al	// TESTB $0x1, AX
	LONG $0x5850f; WORD $0x0	// jne 0x1af	// JNE _lbl_1af

_lbl_1aa:
	LONG $0x15e9; BYTE $0x0	// jmp 0x1c4	// JMP _lbl_1c4

_lbl_1af:
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x50788b48	// movq 0x50(%rax), %rdi	// MOVQ 0x50(AX), DI
	LONG $0xc44e8; BYTE $0x0	// callq 0xe00	// CALL ·__native_entry__+3584(SB)
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0x2b8e9; BYTE $0x0	// jmp 0x47c	// JMP _lbl_47c

_lbl_1c4:
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x14	// movl 0x14(%rax), %eax	// MOVL 0x14(AX), AX
	WORD $0xe083; BYTE $0x1	// andl $1, %eax	// ANDL $0x1, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x15840f; WORD $0x0	// je 0x1ec	// JE _lbl_1ec
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x50488b48	// movq 0x50(%rax), %rcx	// MOVQ 0x50(AX), CX
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x40488948	// movq %rcx, 0x40(%rax)	// MOVQ CX, 0x40(AX)
	LONG $0x70e9; BYTE $0x0	// jmp 0x25c	// JMP _lbl_25c

_lbl_1ec:
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x38708b48	// movq 0x38(%rax), %rsi	// MOVQ 0x38(AX), SI
	LONG $0xf8458b44	// movl -8(%rbp), %r8d	// MOVL -0x8(BP), R8
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0xc789	// movl %eax, %edi	// MOVL AX, DI
	LONG $0x3ba; BYTE $0x0	// movl $3, %edx	// MOVL $0x3, DX
	LONG $0x8001b9; BYTE $0x0	// movl $0x8001, %ecx	// MOVL $0x8001, CX
	LONG $0xb941; WORD $0x800	// movl $0x8000000, %r9d	// MOVL $0x8000000, R9
	LONG $0xb4fe8; BYTE $0x0	// callq 0xd60	// CALL ·__native_entry__+3424(SB)
	WORD $0x8948; BYTE $0xc1	// movq %rax, %rcx	// MOVQ AX, CX
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x40488948	// movq %rcx, 0x40(%rax)	// MOVQ CX, 0x40(AX)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x40788b48	// movq 0x40(%rax), %rdi	// MOVQ 0x40(AX), DI
	LONG $0xba7e8; BYTE $0x0	// callq 0xdd0	// CALL ·__native_entry__+3536(SB)
	WORD $0x1a8	// testb $1, %al	// TESTB $0x1, AX
	LONG $0x5850f; WORD $0x0	// jne 0x236	// JNE _lbl_236
	LONG $0x21e9; BYTE $0x0	// jmp 0x257	// JMP _lbl_257

_lbl_236:
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x40788b48	// movq 0x40(%rax), %rdi	// MOVQ 0x40(AX), DI
	LONG $0xbbde8; BYTE $0x0	// callq 0xe00	// CALL ·__native_entry__+3584(SB)
	WORD $0x4589; BYTE $0xd4	// movl %eax, -0x2c(%rbp)	// MOVL AX, -0x2c(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	QUAD $0x4040c748	// movq $0, 0x40(%rax)	// MOVQ $0x0, 0x40(AX)
	LONG $0x143e9; BYTE $0x0	// jmp 0x39a	// JMP _lbl_39a

_lbl_257:
	LONG $0xe9; BYTE $0x0	// jmp 0x25c	// JMP _lbl_25c

_lbl_25c:
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x50488b48	// movq 0x50(%rax), %rcx	// MOVQ 0x50(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x28	// movl 0x28(%rax), %eax	// MOVL 0x28(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x8948; BYTE $0x8	// movq %rcx, (%rax)	// MOVQ CX, (AX)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x50488b48	// movq 0x50(%rax), %rcx	// MOVQ 0x50(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x2c	// movl 0x2c(%rax), %eax	// MOVL 0x2c(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x8488948	// movq %rcx, 8(%rax)	// MOVQ CX, 0x8(AX)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x50488b48	// movq 0x50(%rax), %rcx	// MOVQ 0x50(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x30	// movl 0x30(%rax), %eax	// MOVL 0x30(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x10488948	// movq %rcx, 0x10(%rax)	// MOVQ CX, 0x10(AX)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x50488b48	// movq 0x50(%rax), %rcx	// MOVQ 0x50(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x34	// movl 0x34(%rax), %eax	// MOVL 0x34(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x18488948	// movq %rcx, 0x18(%rax)	// MOVQ CX, 0x18(AX)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x50488b48	// movq 0x50(%rax), %rcx	// MOVQ 0x50(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x38	// movl 0x38(%rax), %eax	// MOVL 0x38(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x20488948	// movq %rcx, 0x20(%rax)	// MOVQ CX, 0x20(AX)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x50488b48	// movq 0x50(%rax), %rcx	// MOVQ 0x50(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x3c	// movl 0x3c(%rax), %eax	// MOVL 0x3c(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x28488948	// movq %rcx, 0x28(%rax)	// MOVQ CX, 0x28(AX)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x50488b48	// movq 0x50(%rax), %rcx	// MOVQ 0x50(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x40	// movl 0x40(%rax), %eax	// MOVL 0x40(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x30488948	// movq %rcx, 0x30(%rax)	// MOVQ CX, 0x30(AX)
	QUAD $0x40d845c748	// movq $0x40, -0x28(%rbp)	// MOVQ $0x40, -0x28(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x8	// movl 8(%rax), %eax	// MOVL 0x8(AX), AX
	LONG $0x40025; BYTE $0x0	// andl $0x400, %eax	// ANDL $0x400, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0xc840f; WORD $0x0	// je 0x33a	// JE _lbl_33a
	LONG $0xd8458b48	// movq -0x28(%rbp), %rax	// MOVQ -0x28(BP), AX
	LONG $0x40c08348	// addq $0x40, %rax	// ADDQ $0x40, AX
	LONG $0xd8458948	// movq %rax, -0x28(%rbp)	// MOVQ AX, -0x28(BP)

_lbl_33a:
	LONG $0xd8758b48	// movq -0x28(%rbp), %rsi	// MOVQ -0x28(BP), SI
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	LONG $0xf0af0f48	// imulq %rax, %rsi	// IMULQ AX, SI
	LONG $0xf8458b44	// movl -8(%rbp), %r8d	// MOVL -0x8(BP), R8
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0xc789	// movl %eax, %edi	// MOVL AX, DI
	LONG $0x3ba; BYTE $0x0	// movl $3, %edx	// MOVL $0x3, DX
	LONG $0x8001b9; BYTE $0x0	// movl $0x8001, %ecx	// MOVL $0x8001, CX
	LONG $0xb941; WORD $0x1000	// movl $0x10000000, %r9d	// MOVL $0x10000000, R9
	LONG $0x9fbe8; BYTE $0x0	// callq 0xd60	// CALL ·__native_entry__+3424(SB)
	WORD $0x8948; BYTE $0xc1	// movq %rax, %rcx	// MOVQ AX, CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x38488948	// movq %rcx, 0x38(%rax)	// MOVQ CX, 0x38(AX)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x38788b48	// movq 0x38(%rax), %rdi	// MOVQ 0x38(AX), DI
	LONG $0xa53e8; BYTE $0x0	// callq 0xdd0	// CALL ·__native_entry__+3536(SB)
	WORD $0x1a8	// testb $1, %al	// TESTB $0x1, AX
	LONG $0x5850f; WORD $0x0	// jne 0x38a	// JNE _lbl_38a
	LONG $0x28e9; BYTE $0x0	// jmp 0x3b2	// JMP _lbl_3b2

_lbl_38a:
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x38788b48	// movq 0x38(%rax), %rdi	// MOVQ 0x38(AX), DI
	LONG $0xa69e8; BYTE $0x0	// callq 0xe00	// CALL ·__native_entry__+3584(SB)
	WORD $0x4589; BYTE $0xd4	// movl %eax, -0x2c(%rbp)	// MOVL AX, -0x2c(BP)

_lbl_39a:
	LONG $0xe87d8b48	// movq -0x18(%rbp), %rdi	// MOVQ -0x18(BP), DI
	LONG $0xe0758b48	// movq -0x20(%rbp), %rsi	// MOVQ -0x20(BP), SI
	LONG $0x4a9e8; BYTE $0x0	// callq 0x850	// CALL ·__native_entry__+2128(SB)
	WORD $0x458b; BYTE $0xd4	// movl -0x2c(%rbp), %eax	// MOVL -0x2c(BP), AX
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0xcae9; BYTE $0x0	// jmp 0x47c	// JMP _lbl_47c

_lbl_3b2:
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x40488b48	// movq 0x40(%rax), %rcx	// MOVQ 0x40(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x50	// movl 0x50(%rax), %eax	// MOVL 0x50(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	WORD $0x8948; BYTE $0x8	// movq %rcx, (%rax)	// MOVQ CX, (AX)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x40488b48	// movq 0x40(%rax), %rcx	// MOVQ 0x40(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x54	// movl 0x54(%rax), %eax	// MOVL 0x54(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x8488948	// movq %rcx, 8(%rax)	// MOVQ CX, 0x8(AX)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x40488b48	// movq 0x40(%rax), %rcx	// MOVQ 0x40(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x58	// movl 0x58(%rax), %eax	// MOVL 0x58(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x10488948	// movq %rcx, 0x10(%rax)	// MOVQ CX, 0x10(AX)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x40488b48	// movq 0x40(%rax), %rcx	// MOVQ 0x40(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x5c	// movl 0x5c(%rax), %eax	// MOVL 0x5c(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x18488948	// movq %rcx, 0x18(%rax)	// MOVQ CX, 0x18(AX)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x40488b48	// movq 0x40(%rax), %rcx	// MOVQ 0x40(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x60	// movl 0x60(%rax), %eax	// MOVL 0x60(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x28488948	// movq %rcx, 0x28(%rax)	// MOVQ CX, 0x28(AX)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x40488b48	// movq 0x40(%rax), %rcx	// MOVQ 0x40(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x64	// movl 0x64(%rax), %eax	// MOVL 0x64(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x30488948	// movq %rcx, 0x30(%rax)	// MOVQ CX, 0x30(AX)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x687883	// cmpl $0, 0x68(%rax)	// CMPL 0x68(AX), $0x0
	LONG $0x1a840f; WORD $0x0	// je 0x475	// JE _lbl_475
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x40488b48	// movq 0x40(%rax), %rcx	// MOVQ 0x40(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x68	// movl 0x68(%rax), %eax	// MOVL 0x68(AX), AX
	WORD $0x148; BYTE $0xc1	// addq %rax, %rcx	// ADDQ AX, CX
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x20488948	// movq %rcx, 0x20(%rax)	// MOVQ CX, 0x20(AX)

_lbl_475:
	LONG $0xfc45c7; WORD $0x0; BYTE $0x0	// movl $0, -4(%rbp)	// MOVL $0x0, -0x4(BP)

_lbl_47c:
	WORD $0x458b; BYTE $0xfc	// movl -4(%rbp), %eax	// MOVL -0x4(BP), AX
	LONG $0x30c48348	// addq $0x30, %rsp	// ADDQ $0x30, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	BYTE $0x90	// nop	// NOP 

__subr_io_uring_ring_dontfork__off_1168:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf07d8948	// movq %rdi, -0x10(%rbp)	// MOVQ DI, -0x10(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x50788348; BYTE $0x0	// cmpq $0, 0x50(%rax)	// CMPQ 0x50(AX), $0x0
	LONG $0x21840f; WORD $0x0	// je 0x4cc	// JE _lbl_4cc
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x38788348; BYTE $0x0	// cmpq $0, 0x38(%rax)	// CMPQ 0x38(AX), $0x0
	LONG $0x12840f; WORD $0x0	// je 0x4cc	// JE _lbl_4cc
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	QUAD $0xa8b88348	// cmpq $0, 0xa8(%rax)	// CMPQ 0xa8(AX), $0x0
	LONG $0xc850f; WORD $0x0	// jne 0x4d8	// JNE _lbl_4d8

_lbl_4cc:
	LONG $0xeafc45c7; WORD $0xffff; BYTE $0xff	// movl $0xffffffea, -4(%rbp)	// MOVL $0xffffffea, -0x4(BP)
	LONG $0x10ce9; BYTE $0x0	// jmp 0x5e4	// JMP _lbl_5e4

_lbl_4d8:
	QUAD $0x40e845c748	// movq $0x40, -0x18(%rbp)	// MOVQ $0x40, -0x18(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xc0808b; WORD $0x0	// movl 0xc0(%rax), %eax	// MOVL 0xc0(AX), AX
	LONG $0x40025; BYTE $0x0	// andl $0x400, %eax	// ANDL $0x400, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0xc840f; WORD $0x0	// je 0x504	// JE _lbl_504
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x40c08348	// addq $0x40, %rax	// ADDQ $0x40, AX
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)

_lbl_504:
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x18408b48	// movq 0x18(%rax), %rax	// MOVQ 0x18(AX), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	LONG $0x45af0f48; BYTE $0xe8	// imulq -0x18(%rbp), %rax	// IMULQ -0x18(BP), AX
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x38788b48	// movq 0x38(%rax), %rdi	// MOVQ 0x38(AX), DI
	LONG $0xe8758b48	// movq -0x18(%rbp), %rsi	// MOVQ -0x18(BP), SI
	LONG $0xaba; BYTE $0x0	// movl $0xa, %edx	// MOVL $0xa, DX
	LONG $0xc3e8; BYTE $0x0	// callq 0x5f0	// CALL ·__native_entry__+1520(SB)
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0xe47d83	// cmpl $0, -0x1c(%rbp)	// CMPL -0x1c(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x545	// JGE _lbl_545
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0x9fe9; BYTE $0x0	// jmp 0x5e4	// JMP _lbl_5e4

_lbl_545:
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x48408b48	// movq 0x48(%rax), %rax	// MOVQ 0x48(AX), AX
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x50788b48	// movq 0x50(%rax), %rdi	// MOVQ 0x50(AX), DI
	LONG $0xe8758b48	// movq -0x18(%rbp), %rsi	// MOVQ -0x18(BP), SI
	LONG $0xaba; BYTE $0x0	// movl $0xa, %edx	// MOVL $0xa, DX
	LONG $0x89e8; BYTE $0x0	// callq 0x5f0	// CALL ·__native_entry__+1520(SB)
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0xe47d83	// cmpl $0, -0x1c(%rbp)	// CMPL -0x1c(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x57f	// JGE _lbl_57f
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0x65e9; BYTE $0x0	// jmp 0x5e4	// JMP _lbl_5e4

_lbl_57f:
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xa8808b48; WORD $0x0; BYTE $0x0	// movq 0xa8(%rax), %rax	// MOVQ 0xa8(AX), AX
	LONG $0xf04d8b48	// movq -0x10(%rbp), %rcx	// MOVQ -0x10(BP), CX
	LONG $0x50413b48	// cmpq 0x50(%rcx), %rax	// CMPQ AX, 0x50(CX)
	LONG $0x45840f; WORD $0x0	// je 0x5dd	// JE _lbl_5dd
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xa0808b48; WORD $0x0; BYTE $0x0	// movq 0xa0(%rax), %rax	// MOVQ 0xa0(AX), AX
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xa8b88b48; WORD $0x0; BYTE $0x0	// movq 0xa8(%rax), %rdi	// MOVQ 0xa8(AX), DI
	LONG $0xe8758b48	// movq -0x18(%rbp), %rsi	// MOVQ -0x18(BP), SI
	LONG $0xaba; BYTE $0x0	// movl $0xa, %edx	// MOVL $0xa, DX
	LONG $0x30e8; BYTE $0x0	// callq 0x5f0	// CALL ·__native_entry__+1520(SB)
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0xe47d83	// cmpl $0, -0x1c(%rbp)	// CMPL -0x1c(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x5d8	// JGE _lbl_5d8
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0xce9; BYTE $0x0	// jmp 0x5e4	// JMP _lbl_5e4

_lbl_5d8:
	LONG $0xe9; BYTE $0x0	// jmp 0x5dd	// JMP _lbl_5dd

_lbl_5dd:
	LONG $0xfc45c7; WORD $0x0; BYTE $0x0	// movl $0, -4(%rbp)	// MOVL $0x0, -0x4(BP)

_lbl_5e4:
	WORD $0x458b; BYTE $0xfc	// movl -4(%rbp), %eax	// MOVL -0x4(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr___sys_madvise__off_1520:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x5589; BYTE $0xec	// movl %edx, -0x14(%rbp)	// MOVL DX, -0x14(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	WORD $0x558b; BYTE $0xec	// movl -0x14(%rbp), %edx	// MOVL -0x14(BP), DX
	LONG $0x1cb8; BYTE $0x0	// movl $0x1c, %eax	// MOVL $0x1c, AX
	WORD $0x50f	// syscall	// SYSCALL 
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0xd8458948	// movq %rax, -0x28(%rbp)	// MOVQ AX, -0x28(BP)
	LONG $0xd8458b48	// movq -0x28(%rbp), %rax	// MOVQ -0x28(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_queue_init_params__off_1584:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	WORD $0x7d89; BYTE $0xf8	// movl %edi, -8(%rbp)	// MOVL DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	LONG $0xe8558948	// movq %rdx, -0x18(%rbp)	// MOVQ DX, -0x18(BP)
	WORD $0x7d8b; BYTE $0xf8	// movl -8(%rbp), %edi	// MOVL -0x8(BP), DI
	LONG $0xe8758b48	// movq -0x18(%rbp), %rsi	// MOVQ -0x18(BP), SI
	LONG $0x71e8; BYTE $0x0	// callq 0x6c0	// CALL ·__native_entry__+1728(SB)
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0xe47d83	// cmpl $0, -0x1c(%rbp)	// CMPL -0x1c(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x667	// JGE _lbl_667
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0x48e9; BYTE $0x0	// jmp 0x6af	// JMP _lbl_6af

_lbl_667:
	WORD $0x7d8b; BYTE $0xe4	// movl -0x1c(%rbp), %edi	// MOVL -0x1c(BP), DI
	LONG $0xe8758b48	// movq -0x18(%rbp), %rsi	// MOVQ -0x18(BP), SI
	LONG $0xf0558b48	// movq -0x10(%rbp), %rdx	// MOVQ -0x10(BP), DX
	LONG $0xfff999e8; BYTE $0xff	// callq 0x10	// CALL ·__native_entry__+16(SB)
	WORD $0x4589; BYTE $0xe0	// movl %eax, -0x20(%rbp)	// MOVL AX, -0x20(BP)
	LONG $0xe07d83	// cmpl $0, -0x20(%rbp)	// CMPL -0x20(BP), $0x0
	LONG $0x13840f; WORD $0x0	// je 0x697	// JE _lbl_697
	WORD $0x7d8b; BYTE $0xe4	// movl -0x1c(%rbp), %edi	// MOVL -0x1c(BP), DI
	LONG $0x64e8; BYTE $0x0	// callq 0x6f0	// CALL ·__native_entry__+1776(SB)
	WORD $0x458b; BYTE $0xe0	// movl -0x20(%rbp), %eax	// MOVL -0x20(BP), AX
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0x18e9; BYTE $0x0	// jmp 0x6af	// JMP _lbl_6af

_lbl_697:
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x488b; BYTE $0x14	// movl 0x14(%rax), %ecx	// MOVL 0x14(AX), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xc88889; WORD $0x0	// movl %ecx, 0xc8(%rax)	// MOVL CX, 0xc8(AX)
	LONG $0xfc45c7; WORD $0x0; BYTE $0x0	// movl $0, -4(%rbp)	// MOVL $0x0, -0x4(BP)

_lbl_6af:
	WORD $0x458b; BYTE $0xfc	// movl -4(%rbp), %eax	// MOVL -0x4(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_____sys_io_uring_setup__off_1728:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	WORD $0x7d89; BYTE $0xfc	// movl %edi, -4(%rbp)	// MOVL DI, -0x4(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x7d8b; BYTE $0xfc	// movl -4(%rbp), %edi	// MOVL -0x4(BP), DI
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	LONG $0x1a9b8; BYTE $0x0	// movl $0x1a9, %eax	// MOVL $0x1a9, AX
	WORD $0x50f	// syscall	// SYSCALL 
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr___sys_close__off_1776:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	WORD $0x7d89; BYTE $0xfc	// movl %edi, -4(%rbp)	// MOVL DI, -0x4(BP)
	WORD $0x7d8b; BYTE $0xfc	// movl -4(%rbp), %edi	// MOVL -0x4(BP), DI
	LONG $0x3b8; BYTE $0x0	// movl $3, %eax	// MOVL $0x3, AX
	WORD $0x50f	// syscall	// SYSCALL 
	LONG $0xf0458948	// movq %rax, -0x10(%rbp)	// MOVQ AX, -0x10(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_queue_init__off_1824:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x90ec8148; WORD $0x0; BYTE $0x0	// subq $0x90, %rsp	// SUBQ $0x90, SP
	WORD $0x7d89; BYTE $0xfc	// movl %edi, -4(%rbp)	// MOVL DI, -0x4(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x5589; BYTE $0xec	// movl %edx, -0x14(%rbp)	// MOVL DX, -0x14(BP)
	LONG $0x70bd8d48; WORD $0xffff; BYTE $0xff	// leaq -0x90(%rbp), %rdi	// LEAQ -0x90(BP), DI
	WORD $0xf631	// xorl %esi, %esi	// XORL SI, SI
	LONG $0x78ba; BYTE $0x0	// movl $0x78, %edx	// MOVL $0x78, DX
	LONG $0x20a8e8; BYTE $0x0	// callq 0x27f0	// CALL ·__native_entry__+10224(SB)
	WORD $0x458b; BYTE $0xec	// movl -0x14(%rbp), %eax	// MOVL -0x14(BP), AX
	LONG $0xff788589; WORD $0xffff	// movl %eax, -0x88(%rbp)	// MOVL AX, -0x88(BP)
	WORD $0x7d8b; BYTE $0xfc	// movl -4(%rbp), %edi	// MOVL -0x4(BP), DI
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	LONG $0x70958d48; WORD $0xffff; BYTE $0xff	// leaq -0x90(%rbp), %rdx	// LEAQ -0x90(BP), DX
	LONG $0xfffecce8; BYTE $0xff	// callq 0x630	// CALL ·__native_entry__+1584(SB)
	LONG $0x90c48148; WORD $0x0; BYTE $0x0	// addq $0x90, %rsp	// ADDQ $0x90, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_queue_exit__off_1904:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xf0458948	// movq %rax, -0x10(%rbp)	// MOVQ AX, -0x10(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0x68c08348	// addq $0x68, %rax	// ADDQ $0x68, AX
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	QUAD $0x40e045c748	// movq $0x40, -0x20(%rbp)	// MOVQ $0x40, -0x20(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc0808b; WORD $0x0	// movl 0xc0(%rax), %eax	// MOVL 0xc0(AX), AX
	LONG $0x40025; BYTE $0x0	// andl $0x400, %eax	// ANDL $0x400, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0xc840f; WORD $0x0	// je 0x7bc	// JE _lbl_7bc
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x40c08348	// addq $0x40, %rax	// ADDQ $0x40, AX
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)

_lbl_7bc:
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x38788b48	// movq 0x38(%rax), %rdi	// MOVQ 0x38(AX), DI
	LONG $0xe0758b48	// movq -0x20(%rbp), %rsi	// MOVQ -0x20(BP), SI
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x18408b48	// movq 0x18(%rax), %rax	// MOVQ 0x18(AX), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	LONG $0xf0af0f48	// imulq %rax, %rsi	// IMULQ AX, SI
	LONG $0x45e8; BYTE $0x0	// callq 0x820	// CALL ·__native_entry__+2080(SB)
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0xe8758b48	// movq -0x18(%rbp), %rsi	// MOVQ -0x18(BP), SI
	LONG $0x68e8; BYTE $0x0	// callq 0x850	// CALL ·__native_entry__+2128(SB)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xd080b60f; WORD $0x0; BYTE $0x0	// movzbl 0xd0(%rax), %eax	// 
	WORD $0xe083; BYTE $0x1	// andl $1, %eax	// ANDL $0x1, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x9840f; WORD $0x0	// je 0x808	// JE _lbl_808
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0x1e68e8; BYTE $0x0	// callq 0x2670	// CALL ·__native_entry__+9840(SB)

_lbl_808:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xfffed9e8; BYTE $0xff	// callq 0x6f0	// CALL ·__native_entry__+1776(SB)
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr___sys_munmap__off_2080:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	LONG $0xbb8; BYTE $0x0	// movl $0xb, %eax	// MOVL $0xb, AX
	WORD $0x50f	// syscall	// SYSCALL 
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_unmap_rings__off_2128:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0x50788b48	// movq 0x50(%rax), %rdi	// MOVQ 0x50(AX), DI
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0x48708b48	// movq 0x48(%rax), %rsi	// MOVQ 0x48(AX), SI
	LONG $0xffffabe8; BYTE $0xff	// callq 0x820	// CALL ·__native_entry__+2080(SB)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x40788348; BYTE $0x0	// cmpq $0, 0x40(%rax)	// CMPQ 0x40(AX), $0x0
	LONG $0x2b840f; WORD $0x0	// je 0x8af	// JE _lbl_8af
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x40408b48	// movq 0x40(%rax), %rax	// MOVQ 0x40(AX), AX
	LONG $0xf84d8b48	// movq -8(%rbp), %rcx	// MOVQ -0x8(BP), CX
	LONG $0x50413b48	// cmpq 0x50(%rcx), %rax	// CMPQ AX, 0x50(CX)
	LONG $0x15840f; WORD $0x0	// je 0x8af	// JE _lbl_8af
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x40788b48	// movq 0x40(%rax), %rdi	// MOVQ 0x40(AX), DI
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x38708b48	// movq 0x38(%rax), %rsi	// MOVQ 0x38(AX), SI
	LONG $0xffff71e8; BYTE $0xff	// callq 0x820	// CALL ·__native_entry__+2080(SB)

_lbl_8af:
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	BYTE $0x90	// nop	// NOP 

__subr_io_uring_get_probe_ring__off_2240:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x30ec8348	// subq $0x30, %rsp	// SUBQ $0x30, SP
	LONG $0xf07d8948	// movq %rdi, -0x10(%rbp)	// MOVQ DI, -0x10(BP)
	QUAD $0x810e045c748	// movq $0x810, -0x20(%rbp)	// MOVQ $0x810, -0x20(BP)
	LONG $0xe07d8b48	// movq -0x20(%rbp), %rdi	// MOVQ -0x20(BP), DI
	LONG $0x73e8; BYTE $0x0	// callq 0x950	// CALL ·__native_entry__+2384(SB)
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xe87d8348; BYTE $0x0	// cmpq $0, -0x18(%rbp)	// CMPQ -0x18(BP), $0x0
	LONG $0xd850f; WORD $0x0	// jne 0x8f9	// JNE _lbl_8f9
	QUAD $0xf845c748	// movq $0, -8(%rbp)	// MOVQ $0x0, -0x8(BP)
	LONG $0x4ce9; BYTE $0x0	// jmp 0x945	// JMP _lbl_945

_lbl_8f9:
	LONG $0xe87d8b48	// movq -0x18(%rbp), %rdi	// MOVQ -0x18(BP), DI
	LONG $0xe0558b48	// movq -0x20(%rbp), %rdx	// MOVQ -0x20(BP), DX
	WORD $0xf631	// xorl %esi, %esi	// XORL SI, SI
	LONG $0x1ee8e8; BYTE $0x0	// callq 0x27f0	// CALL ·__native_entry__+10224(SB)
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0xe8758b48	// movq -0x18(%rbp), %rsi	// MOVQ -0x18(BP), SI
	LONG $0x100ba; BYTE $0x0	// movl $0x100, %edx	// MOVL $0x100, DX
	LONG $0x1ad6e8; BYTE $0x0	// callq 0x23f0	// CALL ·__native_entry__+9200(SB)
	WORD $0x4589; BYTE $0xdc	// movl %eax, -0x24(%rbp)	// MOVL AX, -0x24(BP)
	LONG $0xdc7d83	// cmpl $0, -0x24(%rbp)	// CMPL -0x24(BP), $0x0
	LONG $0xd8c0f; WORD $0x0	// jl 0x934	// JL _lbl_934
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xf8458948	// movq %rax, -8(%rbp)	// MOVQ AX, -0x8(BP)
	LONG $0x11e9; BYTE $0x0	// jmp 0x945	// JMP _lbl_945

_lbl_934:
	LONG $0xe87d8b48	// movq -0x18(%rbp), %rdi	// MOVQ -0x18(BP), DI
	LONG $0x33e8; BYTE $0x0	// callq 0x970	// CALL ·__native_entry__+2416(SB)
	QUAD $0xf845c748	// movq $0, -8(%rbp)	// MOVQ $0x0, -0x8(BP)

_lbl_945:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0x30c48348	// addq $0x30, %rsp	// ADDQ $0x30, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	BYTE $0x90	// nop	// NOP 

__subr_uring_malloc__off_2384:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0x1eebe8; BYTE $0x0	// callq 0x2850	// CALL ·__native_entry__+10320(SB)
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_uring_free__off_2416:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0x1febe8; BYTE $0x0	// callq 0x2970	// CALL ·__native_entry__+10608(SB)
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_io_uring_get_probe__off_2448:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf0ec8148; WORD $0x0; BYTE $0x0	// subq $0xf0, %rsp	// SUBQ $0xf0, SP
	LONG $0x2bf; BYTE $0x0	// movl $2, %edi	// MOVL $0x2, DI
	LONG $0x20b58d48; WORD $0xffff; BYTE $0xff	// leaq -0xe0(%rbp), %rsi	// LEAQ -0xe0(BP), SI
	WORD $0xd231	// xorl %edx, %edx	// XORL DX, DX
	LONG $0xfffd72e8; BYTE $0xff	// callq 0x720	// CALL ·__native_entry__+1824(SB)
	LONG $0xff148589; WORD $0xffff	// movl %eax, -0xec(%rbp)	// MOVL AX, -0xec(BP)
	LONG $0xff14bd83; WORD $0xffff; BYTE $0x0	// cmpl $0, -0xec(%rbp)	// CMPL -0xec(BP), $0x0
	LONG $0xd8d0f; WORD $0x0	// jge 0x9ce	// JGE _lbl_9ce
	QUAD $0xf845c748	// movq $0, -8(%rbp)	// MOVQ $0x0, -0x8(BP)
	LONG $0x2ae9; BYTE $0x0	// jmp 0x9f8	// JMP _lbl_9f8

_lbl_9ce:
	LONG $0x20bd8d48; WORD $0xffff; BYTE $0xff	// leaq -0xe0(%rbp), %rdi	// LEAQ -0xe0(BP), DI
	LONG $0xfffee6e8; BYTE $0xff	// callq 0x8c0	// CALL ·__native_entry__+2240(SB)
	LONG $0x18858948; WORD $0xffff; BYTE $0xff	// movq %rax, -0xe8(%rbp)	// MOVQ AX, -0xe8(BP)
	LONG $0x20bd8d48; WORD $0xffff; BYTE $0xff	// leaq -0xe0(%rbp), %rdi	// LEAQ -0xe0(BP), DI
	LONG $0xfffd83e8; BYTE $0xff	// callq 0x770	// CALL ·__native_entry__+1904(SB)
	LONG $0x18858b48; WORD $0xffff; BYTE $0xff	// movq -0xe8(%rbp), %rax	// MOVQ -0xe8(BP), AX
	LONG $0xf8458948	// movq %rax, -8(%rbp)	// MOVQ AX, -0x8(BP)

_lbl_9f8:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xf0c48148; WORD $0x0; BYTE $0x0	// addq $0xf0, %rsp	// ADDQ $0xf0, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	BYTE $0x90	// nop	// NOP 

__subr_io_uring_free_probe__off_2576:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xffff4be8; BYTE $0xff	// callq 0x970	// CALL ·__native_entry__+2416(SB)
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_io_uring_mlock_size_params__off_2608:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x80ec8148; WORD $0x1; BYTE $0x0	// subq $0x180, %rsp	// SUBQ $0x180, SP
	WORD $0x7d89; BYTE $0xf4	// movl %edi, -0xc(%rbp)	// MOVL DI, -0xc(BP)
	LONG $0xe8758948	// movq %rsi, -0x18(%rbp)	// MOVQ SI, -0x18(BP)
	LONG $0x70bd8d48; WORD $0xffff; BYTE $0xff	// leaq -0x90(%rbp), %rdi	// LEAQ -0x90(BP), DI
	WORD $0xf631	// xorl %esi, %esi	// XORL SI, SI
	LONG $0x78ba; BYTE $0x0	// movl $0x78, %edx	// MOVL $0x78, DX
	LONG $0x1d9be8; BYTE $0x0	// callq 0x27f0	// CALL ·__native_entry__+10224(SB)
	WORD $0x7d8b; BYTE $0xf4	// movl -0xc(%rbp), %edi	// MOVL -0xc(BP), DI
	LONG $0x98b58d48; WORD $0xfffe; BYTE $0xff	// leaq -0x168(%rbp), %rsi	// LEAQ -0x168(BP), SI
	LONG $0x70958d48; WORD $0xffff; BYTE $0xff	// leaq -0x90(%rbp), %rdx	// LEAQ -0x90(BP), DX
	LONG $0xfffbc5e8; BYTE $0xff	// callq 0x630	// CALL ·__native_entry__+1584(SB)
	WORD $0x9848	// cltq	// 
	LONG $0x80858948; WORD $0xfffe; BYTE $0xff	// movq %rax, -0x180(%rbp)	// MOVQ AX, -0x180(BP)
	QUAD $0xfffffe80bd8348	// cmpq $0, -0x180(%rbp)	// CMPQ -0x180(BP), $0x0
	LONG $0xc850f; WORD $0x0	// jne 0xa8e	// JNE _lbl_a8e
	LONG $0x98bd8d48; WORD $0xfffe; BYTE $0xff	// leaq -0x168(%rbp), %rdi	// LEAQ -0x168(BP), DI
	LONG $0xfffce2e8; BYTE $0xff	// callq 0x770	// CALL ·__native_entry__+1904(SB)

_lbl_a8e:
	WORD $0x458b; BYTE $0x84	// movl -0x7c(%rbp), %eax	// MOVL -0x7c(BP), AX
	LONG $0x20025; BYTE $0x0	// andl $0x200, %eax	// ANDL $0x200, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0xd840f; WORD $0x0	// je 0xaac	// JE _lbl_aac
	QUAD $0xf845c748	// movq $0, -8(%rbp)	// MOVQ $0x0, -0x8(BP)
	LONG $0x134e9; BYTE $0x0	// jmp 0xbe0	// JMP _lbl_be0

_lbl_aac:
	LONG $0xf47d83	// cmpl $0, -0xc(%rbp)	// CMPL -0xc(BP), $0x0
	LONG $0xd850f; WORD $0x0	// jne 0xac3	// JNE _lbl_ac3
	QUAD $0xffffffeaf845c748	// movq $-0x16, -8(%rbp)	// MOVQ $-0x16, -0x8(BP)
	LONG $0x11de9; BYTE $0x0	// jmp 0xbe0	// JMP _lbl_be0

_lbl_ac3:
	LONG $0xf47d81; WORD $0x80; BYTE $0x0	// cmpl $0x8000, -0xc(%rbp)	// CMPL -0xc(BP), $0x8000
	LONG $0x27860f; WORD $0x0	// jbe 0xaf7	// JBE _lbl_af7
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x408b; BYTE $0x8	// movl 8(%rax), %eax	// MOVL 0x8(AX), AX
	WORD $0xe083; BYTE $0x10	// andl $0x10, %eax	// ANDL $0x10, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0xd850f; WORD $0x0	// jne 0xaf0	// JNE _lbl_af0
	QUAD $0xffffffeaf845c748	// movq $-0x16, -8(%rbp)	// MOVQ $-0x16, -0x8(BP)
	LONG $0xf0e9; BYTE $0x0	// jmp 0xbe0	// JMP _lbl_be0

_lbl_af0:
	LONG $0xf445c7; WORD $0x80; BYTE $0x0	// movl $0x8000, -0xc(%rbp)	// MOVL $0x8000, -0xc(BP)

_lbl_af7:
	WORD $0x7d8b; BYTE $0xf4	// movl -0xc(%rbp), %edi	// MOVL -0xc(BP), DI
	LONG $0xf1e8; BYTE $0x0	// callq 0xbf0	// CALL ·__native_entry__+3056(SB)
	WORD $0x4589; BYTE $0xf4	// movl %eax, -0xc(%rbp)	// MOVL AX, -0xc(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x408b; BYTE $0x8	// movl 8(%rax), %eax	// MOVL 0x8(AX), AX
	WORD $0xe083; BYTE $0x8	// andl $8, %eax	// ANDL $0x8, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x94840f; WORD $0x0	// je 0xba9	// JE _lbl_ba9
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x47883	// cmpl $0, 4(%rax)	// CMPL 0x4(AX), $0x0
	LONG $0xd850f; WORD $0x0	// jne 0xb30	// JNE _lbl_b30
	QUAD $0xffffffeaf845c748	// movq $-0x16, -8(%rbp)	// MOVQ $-0x16, -0x8(BP)
	LONG $0xb0e9; BYTE $0x0	// jmp 0xbe0	// JMP _lbl_be0

_lbl_b30:
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x408b; BYTE $0x4	// movl 4(%rax), %eax	// MOVL 0x4(AX), AX
	LONG $0xfe948589; WORD $0xffff	// movl %eax, -0x16c(%rbp)	// MOVL AX, -0x16c(BP)
	QUAD $0xfffffe94bd81; WORD $0x1	// cmpl $0x10000, -0x16c(%rbp)	// CMPL -0x16c(BP), $0x10000
	LONG $0x2a860f; WORD $0x0	// jbe 0xb77	// JBE _lbl_b77
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x408b; BYTE $0x8	// movl 8(%rax), %eax	// MOVL 0x8(AX), AX
	WORD $0xe083; BYTE $0x10	// andl $0x10, %eax	// ANDL $0x10, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0xd850f; WORD $0x0	// jne 0xb6d	// JNE _lbl_b6d
	QUAD $0xffffffeaf845c748	// movq $-0x16, -8(%rbp)	// MOVQ $-0x16, -0x8(BP)
	LONG $0x73e9; BYTE $0x0	// jmp 0xbe0	// JMP _lbl_be0

_lbl_b6d:
	QUAD $0xfffffe9485c7; WORD $0x1	// movl $0x10000, -0x16c(%rbp)	// MOVL $0x10000, -0x16c(BP)

_lbl_b77:
	LONG $0xfe94bd8b; WORD $0xffff	// movl -0x16c(%rbp), %edi	// MOVL -0x16c(BP), DI
	LONG $0x6ee8; BYTE $0x0	// callq 0xbf0	// CALL ·__native_entry__+3056(SB)
	LONG $0xfe948589; WORD $0xffff	// movl %eax, -0x16c(%rbp)	// MOVL AX, -0x16c(BP)
	LONG $0xfe94858b; WORD $0xffff	// movl -0x16c(%rbp), %eax	// MOVL -0x16c(BP), AX
	WORD $0x453b; BYTE $0xf4	// cmpl -0xc(%rbp), %eax	// CMPL AX, -0xc(BP)
	LONG $0xd830f; WORD $0x0	// jae 0xba4	// JAE _lbl_ba4
	QUAD $0xffffffeaf845c748	// movq $-0x16, -8(%rbp)	// MOVQ $-0x16, -0x8(BP)
	LONG $0x3ce9; BYTE $0x0	// jmp 0xbe0	// JMP _lbl_be0

_lbl_ba4:
	LONG $0xce9; BYTE $0x0	// jmp 0xbb5	// JMP _lbl_bb5

_lbl_ba9:
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0xe0c1; BYTE $0x1	// shll $1, %eax	// SHLL $0x1, AX
	LONG $0xfe948589; WORD $0xffff	// movl %eax, -0x16c(%rbp)	// MOVL AX, -0x16c(BP)

_lbl_bb5:
	LONG $0x66e8; BYTE $0x0	// callq 0xc20	// CALL ·__native_entry__+3104(SB)
	LONG $0x88858948; WORD $0xfffe; BYTE $0xff	// movq %rax, -0x178(%rbp)	// MOVQ AX, -0x178(BP)
	LONG $0xe87d8b48	// movq -0x18(%rbp), %rdi	// MOVQ -0x18(BP), DI
	WORD $0x758b; BYTE $0xf4	// movl -0xc(%rbp), %esi	// MOVL -0xc(BP), SI
	LONG $0xfe94958b; WORD $0xffff	// movl -0x16c(%rbp), %edx	// MOVL -0x16c(BP), DX
	LONG $0x88858b48; WORD $0xfffe; BYTE $0xff	// movq -0x178(%rbp), %rax	// MOVQ -0x178(BP), AX
	WORD $0xc189	// movl %eax, %ecx	// MOVL AX, CX
	LONG $0x54e8; BYTE $0x0	// callq 0xc30	// CALL ·__native_entry__+3120(SB)
	LONG $0xf8458948	// movq %rax, -8(%rbp)	// MOVQ AX, -0x8(BP)

_lbl_be0:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0x80c48148; WORD $0x1; BYTE $0x0	// addq $0x180, %rsp	// ADDQ $0x180, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_roundup_pow2__off_3056:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	WORD $0x7d89; BYTE $0xfc	// movl %edi, -4(%rbp)	// MOVL DI, -0x4(BP)
	WORD $0x7d8b; BYTE $0xfc	// movl -4(%rbp), %edi	// MOVL -0x4(BP), DI
	WORD $0xef83; BYTE $0x1	// subl $1, %edi	// SUBL $0x1, DI
	LONG $0x20ae8; BYTE $0x0	// callq 0xe10	// CALL ·__native_entry__+3600(SB)
	WORD $0xc089	// movl %eax, %eax	// MOVL AX, AX
	WORD $0xc189	// movl %eax, %ecx	// MOVL AX, CX
	LONG $0x1b8; BYTE $0x0	// movl $1, %eax	// MOVL $0x1, AX
	WORD $0xd348; BYTE $0xe0	// shlq %cl, %rax	// SHLQ CX, AX
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_get_page_size__off_3104:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x1000b8; BYTE $0x0	// movl $0x1000, %eax	// MOVL $0x1000, AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_rings_size__off_3120:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x30ec8348	// subq $0x30, %rsp	// SUBQ $0x30, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	WORD $0x5589; BYTE $0xf0	// movl %edx, -0x10(%rbp)	// MOVL DX, -0x10(BP)
	WORD $0x4d89; BYTE $0xec	// movl %ecx, -0x14(%rbp)	// MOVL CX, -0x14(BP)
	QUAD $0x10d045c748	// movq $0x10, -0x30(%rbp)	// MOVQ $0x10, -0x30(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	WORD $0x408b; BYTE $0x8	// movl 8(%rax), %eax	// MOVL 0x8(AX), AX
	LONG $0x80025; BYTE $0x0	// andl $0x800, %eax	// ANDL $0x800, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0xc840f; WORD $0x0	// je 0xc6e	// JE _lbl_c6e
	LONG $0xd0458b48	// movq -0x30(%rbp), %rax	// MOVQ -0x30(BP), AX
	LONG $0x10c08348	// addq $0x10, %rax	// ADDQ $0x10, AX
	LONG $0xd0458948	// movq %rax, -0x30(%rbp)	// MOVQ AX, -0x30(BP)

_lbl_c6e:
	WORD $0x458b; BYTE $0xf0	// movl -0x10(%rbp), %eax	// MOVL -0x10(BP), AX
	LONG $0x45af0f48; BYTE $0xd0	// imulq -0x30(%rbp), %rax	// IMULQ -0x30(BP), AX
	LONG $0xd0458948	// movq %rax, -0x30(%rbp)	// MOVQ AX, -0x30(BP)
	LONG $0xd0458b48	// movq -0x30(%rbp), %rax	// MOVQ -0x30(BP), AX
	LONG $0x1400548; WORD $0x0	// addq $0x140, %rax	// ADDQ $0x140, AX
	LONG $0xd0458948	// movq %rax, -0x30(%rbp)	// MOVQ AX, -0x30(BP)
	LONG $0xd0458b48	// movq -0x30(%rbp), %rax	// MOVQ -0x30(BP), AX
	LONG $0x3fc08348	// addq $0x3f, %rax	// ADDQ $0x3f, AX
	LONG $0xc0e08348	// andq $0xffffffffffffffc0, %rax	// ANDQ $-0x40, AX
	LONG $0xd0458948	// movq %rax, -0x30(%rbp)	// MOVQ AX, -0x30(BP)
	LONG $0xd07d8b48	// movq -0x30(%rbp), %rdi	// MOVQ -0x30(BP), DI
	WORD $0x758b; BYTE $0xec	// movl -0x14(%rbp), %esi	// MOVL -0x14(BP), SI
	LONG $0x1ace8; BYTE $0x0	// callq 0xe50	// CALL ·__native_entry__+3664(SB)
	WORD $0x8948; BYTE $0xc1	// movq %rax, %rcx	// MOVQ AX, CX
	LONG $0x1b8; BYTE $0x0	// movl $1, %eax	// MOVL $0x1, AX
	WORD $0xd348; BYTE $0xe0	// shlq %cl, %rax	// SHLQ CX, AX
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)
	QUAD $0x40d845c748	// movq $0x40, -0x28(%rbp)	// MOVQ $0x40, -0x28(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	WORD $0x408b; BYTE $0x8	// movl 8(%rax), %eax	// MOVL 0x8(AX), AX
	LONG $0x40025; BYTE $0x0	// andl $0x400, %eax	// ANDL $0x400, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0xc840f; WORD $0x0	// je 0xcdc	// JE _lbl_cdc
	LONG $0xd8458b48	// movq -0x28(%rbp), %rax	// MOVQ -0x28(BP), AX
	LONG $0x40c08348	// addq $0x40, %rax	// ADDQ $0x40, AX
	LONG $0xd8458948	// movq %rax, -0x28(%rbp)	// MOVQ AX, -0x28(BP)

_lbl_cdc:
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	LONG $0x45af0f48; BYTE $0xd8	// imulq -0x28(%rbp), %rax	// IMULQ -0x28(BP), AX
	LONG $0xd8458948	// movq %rax, -0x28(%rbp)	// MOVQ AX, -0x28(BP)
	LONG $0xd87d8b48	// movq -0x28(%rbp), %rdi	// MOVQ -0x28(BP), DI
	WORD $0x758b; BYTE $0xec	// movl -0x14(%rbp), %esi	// MOVL -0x14(BP), SI
	LONG $0x15ce8; BYTE $0x0	// callq 0xe50	// CALL ·__native_entry__+3664(SB)
	WORD $0x8948; BYTE $0xc1	// movq %rax, %rcx	// MOVQ AX, CX
	LONG $0x1b8; BYTE $0x0	// movl $1, %eax	// MOVL $0x1, AX
	WORD $0xd348; BYTE $0xe0	// shlq %cl, %rax	// SHLQ CX, AX
	LONG $0xe0450348	// addq -0x20(%rbp), %rax	// ADDQ -0x20(BP), AX
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	WORD $0x4d8b; BYTE $0xec	// movl -0x14(%rbp), %ecx	// MOVL -0x14(BP), CX
	LONG $0xc1af0f48	// imulq %rcx, %rax	// IMULQ CX, AX
	LONG $0x30c48348	// addq $0x30, %rsp	// ADDQ $0x30, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_io_uring_mlock_size__off_3360:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x80ec8148; WORD $0x0; BYTE $0x0	// subq $0x80, %rsp	// SUBQ $0x80, SP
	WORD $0x7d89; BYTE $0xfc	// movl %edi, -4(%rbp)	// MOVL DI, -0x4(BP)
	WORD $0x7589; BYTE $0xf8	// movl %esi, -8(%rbp)	// MOVL SI, -0x8(BP)
	LONG $0x807d8d48	// leaq -0x80(%rbp), %rdi	// LEAQ -0x80(BP), DI
	WORD $0xf631	// xorl %esi, %esi	// XORL SI, SI
	LONG $0x78ba; BYTE $0x0	// movl $0x78, %edx	// MOVL $0x78, DX
	LONG $0x1aafe8; BYTE $0x0	// callq 0x27f0	// CALL ·__native_entry__+10224(SB)
	WORD $0x458b; BYTE $0xf8	// movl -8(%rbp), %eax	// MOVL -0x8(BP), AX
	WORD $0x4589; BYTE $0x88	// movl %eax, -0x78(%rbp)	// MOVL AX, -0x78(BP)
	WORD $0x7d8b; BYTE $0xfc	// movl -4(%rbp), %edi	// MOVL -0x4(BP), DI
	LONG $0x80758d48	// leaq -0x80(%rbp), %rsi	// LEAQ -0x80(BP), SI
	LONG $0xfffcdde8; BYTE $0xff	// callq 0xa30	// CALL ·__native_entry__+2608(SB)
	LONG $0x80c48148; WORD $0x0; BYTE $0x0	// addq $0x80, %rsp	// ADDQ $0x80, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x401f0f	// nopl (%rax)	// NOPL (AX)

__subr___sys_mmap__off_3424:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x5589; BYTE $0xec	// movl %edx, -0x14(%rbp)	// MOVL DX, -0x14(BP)
	WORD $0x4d89; BYTE $0xe8	// movl %ecx, -0x18(%rbp)	// MOVL CX, -0x18(BP)
	LONG $0xe4458944	// movl %r8d, -0x1c(%rbp)	// MOVL R8, -0x1c(BP)
	LONG $0xd84d894c	// movq %r9, -0x28(%rbp)	// MOVQ R9, -0x28(BP)
	LONG $0x9d445c7; WORD $0x0; BYTE $0x0	// movl $9, -0x2c(%rbp)	// MOVL $0x9, -0x2c(BP)
	WORD $0x458b; BYTE $0xe8	// movl -0x18(%rbp), %eax	// MOVL -0x18(BP), AX
	WORD $0x4589; BYTE $0xc4	// movl %eax, -0x3c(%rbp)	// MOVL AX, -0x3c(BP)
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0x4589; BYTE $0xc0	// movl %eax, -0x40(%rbp)	// MOVL AX, -0x40(BP)
	LONG $0xd8458b48	// movq -0x28(%rbp), %rax	// MOVQ -0x28(BP), AX
	LONG $0xb8458948	// movq %rax, -0x48(%rbp)	// MOVQ AX, -0x48(BP)
	WORD $0x458b; BYTE $0xd4	// movl -0x2c(%rbp), %eax	// MOVL -0x2c(BP), AX
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	WORD $0x558b; BYTE $0xec	// movl -0x14(%rbp), %edx	// MOVL -0x14(BP), DX
	LONG $0xc4558b44	// movl -0x3c(%rbp), %r10d	// MOVL -0x3c(BP), R10
	LONG $0xc0458b44	// movl -0x40(%rbp), %r8d	// MOVL -0x40(BP), R8
	LONG $0xb84d8b4c	// movq -0x48(%rbp), %r9	// MOVQ -0x48(BP), R9
	WORD $0x50f	// syscall	// SYSCALL 
	LONG $0xc8458948	// movq %rax, -0x38(%rbp)	// MOVQ AX, -0x38(BP)
	LONG $0xc8458b48	// movq -0x38(%rbp), %rax	// MOVQ -0x38(BP), AX
	LONG $0xb0458948	// movq %rax, -0x50(%rbp)	// MOVQ AX, -0x50(BP)
	LONG $0xb0458b48	// movq -0x50(%rbp), %rax	// MOVQ -0x50(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_IS_ERR__off_3536:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xf0013d48; WORD $0xffff	// cmpq $-0xfff, %rax	// CMPQ AX, $-0xfff
	WORD $0x930f; BYTE $0xc0	// setae %al	// 
	WORD $0xff34	// xorb $0xff, %al	// XORB $0xff, AX
	WORD $0xff34	// xorb $0xff, %al	// XORB $0xff, AX
	WORD $0x124	// andb $1, %al	// ANDB $0x1, AX
	WORD $0xb60f; BYTE $0xc0	// movzbl %al, %eax	// 
	WORD $0x9848	// cltq	// 
	LONG $0xf88348	// cmpq $0, %rax	// CMPQ AX, $0x0
	WORD $0x950f; BYTE $0xc0	// setne %al	// SETNE AX
	WORD $0x124	// andb $1, %al	// ANDB $0x1, AX
	WORD $0xb60f; BYTE $0xc0	// movzbl %al, %eax	// 
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x9066	// nop	// NOP 

__subr_PTR_ERR__off_3584:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x9066	// nop	// NOP 

__subr___fls__off_3600:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	WORD $0x7d89; BYTE $0xf8	// movl %edi, -8(%rbp)	// MOVL DI, -0x8(BP)
	LONG $0xf87d83	// cmpl $0, -8(%rbp)	// CMPL -0x8(BP), $0x0
	LONG $0xc850f; WORD $0x0	// jne 0xe2d	// JNE _lbl_e2d
	LONG $0xfc45c7; WORD $0x0; BYTE $0x0	// movl $0, -4(%rbp)	// MOVL $0x0, -0x4(BP)
	LONG $0x17e9; BYTE $0x0	// jmp 0xe44	// JMP _lbl_e44

_lbl_e2d:
	WORD $0x458b; BYTE $0xf8	// movl -8(%rbp), %eax	// MOVL -0x8(BP), AX
	WORD $0xbd0f; BYTE $0xc0	// bsrl %eax, %eax	// BSRL AX, AX
	WORD $0xf083; BYTE $0x1f	// xorl $0x1f, %eax	// XORL $0x1f, AX
	WORD $0x6348; BYTE $0xc8	// movslq %eax, %rcx	// 
	LONG $0x20b8; BYTE $0x0	// movl $0x20, %eax	// MOVL $0x20, AX
	WORD $0x2948; BYTE $0xc8	// subq %rcx, %rax	// SUBQ CX, AX
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)

_lbl_e44:
	WORD $0x458b; BYTE $0xfc	// movl -4(%rbp), %eax	// MOVL -0x4(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x801f0f; WORD $0x0; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_npages__off_3664:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xffc08348	// addq $-1, %rax	// ADDQ $-0x1, AX
	LONG $0xf8458948	// movq %rax, -8(%rbp)	// MOVQ AX, -0x8(BP)
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0xc189	// movl %eax, %ecx	// MOVL AX, CX
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	WORD $0xd231	// xorl %edx, %edx	// XORL DX, DX
	WORD $0xf748; BYTE $0xf1	// divq %rcx	// DIVQ CX
	LONG $0xf8458948	// movq %rax, -8(%rbp)	// MOVQ AX, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	WORD $0xc789	// movl %eax, %edi	// MOVL AX, DI
	LONG $0xffff88e8; BYTE $0xff	// callq 0xe10	// CALL ·__native_entry__+3600(SB)
	WORD $0x9848	// cltq	// 
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 

__subr___io_uring_get_cqe__off_3728:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x40ec8348	// subq $0x40, %rsp	// SUBQ $0x40, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x5589; BYTE $0xec	// movl %edx, -0x14(%rbp)	// MOVL DX, -0x14(BP)
	WORD $0x4d89; BYTE $0xe8	// movl %ecx, -0x18(%rbp)	// MOVL CX, -0x18(BP)
	LONG $0xe045894c	// movq %r8, -0x20(%rbp)	// MOVQ R8, -0x20(BP)
	WORD $0x458b; BYTE $0xec	// movl -0x14(%rbp), %eax	// MOVL -0x14(BP), AX
	WORD $0x4589; BYTE $0xc8	// movl %eax, -0x38(%rbp)	// MOVL AX, -0x38(BP)
	WORD $0x458b; BYTE $0xe8	// movl -0x18(%rbp), %eax	// MOVL -0x18(BP), AX
	WORD $0x4589; BYTE $0xcc	// movl %eax, -0x34(%rbp)	// MOVL AX, -0x34(BP)
	LONG $0xd045c7; WORD $0x0; BYTE $0x0	// movl $0, -0x30(%rbp)	// MOVL $0x0, -0x30(BP)
	LONG $0x8d445c7; WORD $0x0; BYTE $0x0	// movl $8, -0x2c(%rbp)	// MOVL $0x8, -0x2c(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0xd8458948	// movq %rax, -0x28(%rbp)	// MOVQ AX, -0x28(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	LONG $0xc8558d48	// leaq -0x38(%rbp), %rdx	// LEAQ -0x38(BP), DX
	LONG $0x13e8; BYTE $0x0	// callq 0xef0	// CALL ·__native_entry__+3824(SB)
	LONG $0x40c48348	// addq $0x40, %rsp	// ADDQ $0x40, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr__io_uring_get_cqe__off_3824:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x40ec8348	// subq $0x40, %rsp	// SUBQ $0x40, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	LONG $0xe8558948	// movq %rdx, -0x18(%rbp)	// MOVQ DX, -0x18(BP)
	QUAD $0xe045c748	// movq $0, -0x20(%rbp)	// MOVQ $0x0, -0x20(BP)
	LONG $0xdf45c6	// movb $0, -0x21(%rbp)	// MOVB $0x0, -0x21(BP)

_lbl_f10:
	LONG $0xd745c6	// movb $0, -0x29(%rbp)	// MOVB $0x0, -0x29(BP)
	LONG $0xd045c7; WORD $0x0; BYTE $0x0	// movl $0, -0x30(%rbp)	// MOVL $0x0, -0x30(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xe0758d48	// leaq -0x20(%rbp), %rsi	// LEAQ -0x20(BP), SI
	LONG $0xcc558d48	// leaq -0x34(%rbp), %rdx	// LEAQ -0x34(BP), DX
	LONG $0x964e8; BYTE $0x0	// callq 0x1890	// CALL ·__native_entry__+6288(SB)
	WORD $0x4589; BYTE $0xd8	// movl %eax, -0x28(%rbp)	// MOVL AX, -0x28(BP)
	LONG $0xd87d83	// cmpl $0, -0x28(%rbp)	// CMPL -0x28(BP), $0x0
	LONG $0x5840f; WORD $0x0	// je 0xf3e	// JE _lbl_f3e
	LONG $0x14de9; BYTE $0x0	// jmp 0x108b	// JMP _lbl_108b

_lbl_f3e:
	LONG $0xe07d8348; BYTE $0x0	// cmpq $0, -0x20(%rbp)	// CMPQ -0x20(BP), $0x0
	LONG $0x46850f; WORD $0x0	// jne 0xf8f	// JNE _lbl_f8f
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x47883	// cmpl $0, 4(%rax)	// CMPL 0x4(AX), $0x0
	LONG $0x38850f; WORD $0x0	// jne 0xf8f	// JNE _lbl_f8f
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x3883; BYTE $0x0	// cmpl $0, (%rax)	// CMPL (AX), $0x0
	LONG $0x2b850f; WORD $0x0	// jne 0xf8f	// JNE _lbl_f8f
	LONG $0x1df45f6	// testb $1, -0x21(%rbp)	// TESTB $0x1, -0x21(BP)
	LONG $0x11850f; WORD $0x0	// jne 0xf7f	// JNE _lbl_f7f
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xa79e8; BYTE $0x0	// callq 0x19f0	// CALL ·__native_entry__+6640(SB)
	WORD $0x1a8	// testb $1, %al	// TESTB $0x1, AX
	LONG $0xc850f; WORD $0x0	// jne 0xf8b	// JNE _lbl_f8b

_lbl_f7f:
	LONG $0xf5d845c7; WORD $0xffff; BYTE $0xff	// movl $0xfffffff5, -0x28(%rbp)	// MOVL $0xfffffff5, -0x28(BP)
	LONG $0x100e9; BYTE $0x0	// jmp 0x108b	// JMP _lbl_108b

_lbl_f8b:
	LONG $0x1d745c6	// movb $1, -0x29(%rbp)	// MOVB $0x1, -0x29(BP)

_lbl_f8f:
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x408b; BYTE $0x4	// movl 4(%rax), %eax	// MOVL 0x4(AX), AX
	WORD $0x453b; BYTE $0xcc	// cmpl -0x34(%rbp), %eax	// CMPL AX, -0x34(BP)
	LONG $0xa870f; WORD $0x0	// ja 0xfa9	// JA _lbl_fa9
	LONG $0x1d745f6	// testb $1, -0x29(%rbp)	// TESTB $0x1, -0x29(BP)
	LONG $0x11840f; WORD $0x0	// je 0xfba	// JE _lbl_fba

_lbl_fa9:
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x408b; BYTE $0x8	// movl 8(%rax), %eax	// MOVL 0x8(AX), AX
	WORD $0xc883; BYTE $0x1	// orl $1, %eax	// ORL $0x1, AX
	WORD $0x4589; BYTE $0xd0	// movl %eax, -0x30(%rbp)	// MOVL AX, -0x30(BP)
	LONG $0x1d745c6	// movb $1, -0x29(%rbp)	// MOVB $0x1, -0x29(BP)

_lbl_fba:
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x3883; BYTE $0x0	// cmpl $0, (%rax)	// CMPL (AX), $0x0
	LONG $0x1e840f; WORD $0x0	// je 0xfe5	// JE _lbl_fe5
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xd0758d48	// leaq -0x30(%rbp), %rsi	// LEAQ -0x30(BP), SI
	LONG $0xa6ce8; BYTE $0x0	// callq 0x1a40	// CALL ·__native_entry__+6720(SB)
	WORD $0x1a8	// testb $1, %al	// TESTB $0x1, AX
	LONG $0x5850f; WORD $0x0	// jne 0xfe1	// JNE _lbl_fe1
	LONG $0x4e9; BYTE $0x0	// jmp 0xfe5	// JMP _lbl_fe5

_lbl_fe1:
	LONG $0x1d745c6	// movb $1, -0x29(%rbp)	// MOVB $0x1, -0x29(BP)

_lbl_fe5:
	LONG $0x1d745f6	// testb $1, -0x29(%rbp)	// TESTB $0x1, -0x29(BP)
	LONG $0x5850f; WORD $0x0	// jne 0xff4	// JNE _lbl_ff4
	LONG $0x97e9; BYTE $0x0	// jmp 0x108b	// JMP _lbl_108b

_lbl_ff4:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xd080b60f; WORD $0x0; BYTE $0x0	// movzbl 0xd0(%rax), %eax	// 
	WORD $0xe083; BYTE $0x1	// andl $1, %eax	// ANDL $0x1, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x9840f; WORD $0x0	// je 0x1014	// JE _lbl_1014
	WORD $0x458b; BYTE $0xd0	// movl -0x30(%rbp), %eax	// MOVL -0x30(BP), AX
	WORD $0xc883; BYTE $0x10	// orl $0x10, %eax	// ORL $0x10, AX
	WORD $0x4589; BYTE $0xd0	// movl %eax, -0x30(%rbp)	// MOVL AX, -0x30(BP)

_lbl_1014:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xccb88b; WORD $0x0	// movl 0xcc(%rax), %edi	// MOVL 0xcc(AX), DI
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x308b	// movl (%rax), %esi	// MOVL (AX), SI
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x508b; BYTE $0x4	// movl 4(%rax), %edx	// MOVL 0x4(AX), DX
	WORD $0x4d8b; BYTE $0xd0	// movl -0x30(%rbp), %ecx	// MOVL -0x30(BP), CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x10408b4c	// movq 0x10(%rax), %r8	// MOVQ 0x10(AX), R8
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xc488b44	// movl 0xc(%rax), %r9d	// MOVL 0xc(AX), R9
	LONG $0xa7de8; BYTE $0x0	// callq 0x1ac0	// CALL ·__native_entry__+6848(SB)
	WORD $0x4589; BYTE $0xc8	// movl %eax, -0x38(%rbp)	// MOVL AX, -0x38(BP)
	LONG $0xc87d83	// cmpl $0, -0x38(%rbp)	// CMPL -0x38(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x105b	// JGE _lbl_105b
	WORD $0x458b; BYTE $0xc8	// movl -0x38(%rbp), %eax	// MOVL -0x38(BP), AX
	WORD $0x4589; BYTE $0xd8	// movl %eax, -0x28(%rbp)	// MOVL AX, -0x28(BP)
	LONG $0x30e9; BYTE $0x0	// jmp 0x108b	// JMP _lbl_108b

_lbl_105b:
	WORD $0x558b; BYTE $0xc8	// movl -0x38(%rbp), %edx	// MOVL -0x38(BP), DX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x88b	// movl (%rax), %ecx	// MOVL (AX), CX
	WORD $0xd129	// subl %edx, %ecx	// SUBL DX, CX
	WORD $0x889	// movl %ecx, (%rax)	// MOVL CX, (AX)
	LONG $0xe07d8348; BYTE $0x0	// cmpq $0, -0x20(%rbp)	// CMPQ -0x20(BP), $0x0
	LONG $0x5840f; WORD $0x0	// je 0x1078	// JE _lbl_1078
	LONG $0x13e9; BYTE $0x0	// jmp 0x108b	// JMP _lbl_108b

_lbl_1078:
	LONG $0x1df45c6	// movb $1, -0x21(%rbp)	// MOVB $0x1, -0x21(BP)
	WORD $0x1b0	// movb $1, %al	// MOVB $0x1, AX
	WORD $0x1a8	// testb $1, %al	// TESTB $0x1, AX
	LONG $0xfe8a850f; WORD $0xffff	// jne 0xf10	// JNE _lbl_f10
	LONG $0xe9; BYTE $0x0	// jmp 0x108b	// JMP _lbl_108b

_lbl_108b:
	LONG $0xe04d8b48	// movq -0x20(%rbp), %rcx	// MOVQ -0x20(BP), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x8948; BYTE $0x8	// movq %rcx, (%rax)	// MOVQ CX, (AX)
	WORD $0x458b; BYTE $0xd8	// movl -0x28(%rbp), %eax	// MOVL -0x28(BP), AX
	LONG $0x40c48348	// addq $0x40, %rsp	// ADDQ $0x40, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	BYTE $0x90	// nop	// NOP 

__subr_io_uring_peek_batch_cqe__off_4256:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x40ec8348	// subq $0x40, %rsp	// SUBQ $0x40, SP
	LONG $0xf07d8948	// movq %rdi, -0x10(%rbp)	// MOVQ DI, -0x10(BP)
	LONG $0xe8758948	// movq %rsi, -0x18(%rbp)	// MOVQ SI, -0x18(BP)
	WORD $0x5589; BYTE $0xe4	// movl %edx, -0x1c(%rbp)	// MOVL DX, -0x1c(BP)
	LONG $0xdf45c6	// movb $0, -0x21(%rbp)	// MOVB $0x0, -0x21(BP)
	LONG $0xd845c7; WORD $0x0; BYTE $0x0	// movl $0, -0x28(%rbp)	// MOVL $0x0, -0x28(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xc0808b; WORD $0x0	// movl 0xc0(%rax), %eax	// MOVL 0xc0(AX), AX
	LONG $0x80025; BYTE $0x0	// andl $0x800, %eax	// ANDL $0x800, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x7840f; WORD $0x0	// je 0x10dd	// JE _lbl_10dd
	LONG $0x1d845c7; WORD $0x0; BYTE $0x0	// movl $1, -0x28(%rbp)	// MOVL $0x1, -0x28(BP)

_lbl_10dd:
	LONG $0xe9; BYTE $0x0	// jmp 0x10e2	// JMP _lbl_10e2

_lbl_10e2:
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0x145e8; BYTE $0x0	// callq 0x1230	// CALL ·__native_entry__+4656(SB)
	WORD $0x4589; BYTE $0xe0	// movl %eax, -0x20(%rbp)	// MOVL AX, -0x20(BP)
	LONG $0xe07d83	// cmpl $0, -0x20(%rbp)	// CMPL -0x20(BP), $0x0
	LONG $0xa6840f; WORD $0x0	// je 0x119e	// JE _lbl_119e
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x68408b48	// movq 0x68(%rax), %rax	// MOVQ 0x68(AX), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	WORD $0x4589; BYTE $0xd4	// movl %eax, -0x2c(%rbp)	// MOVL AX, -0x2c(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x78408b48	// movq 0x78(%rax), %rax	// MOVQ 0x78(AX), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	WORD $0x4589; BYTE $0xd0	// movl %eax, -0x30(%rbp)	// MOVL AX, -0x30(BP)
	LONG $0xc845c7; WORD $0x0; BYTE $0x0	// movl $0, -0x38(%rbp)	// MOVL $0x0, -0x38(BP)
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0x453b; BYTE $0xe0	// cmpl -0x20(%rbp), %eax	// CMPL AX, -0x20(BP)
	LONG $0xb860f; WORD $0x0	// jbe 0x1130	// JBE _lbl_1130
	WORD $0x458b; BYTE $0xe0	// movl -0x20(%rbp), %eax	// MOVL -0x20(BP), AX
	WORD $0x4589; BYTE $0xc0	// movl %eax, -0x40(%rbp)	// MOVL AX, -0x40(BP)
	LONG $0x6e9; BYTE $0x0	// jmp 0x1136	// JMP _lbl_1136

_lbl_1130:
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0x4589; BYTE $0xc0	// movl %eax, -0x40(%rbp)	// MOVL AX, -0x40(BP)

_lbl_1136:
	WORD $0x458b; BYTE $0xc0	// movl -0x40(%rbp), %eax	// MOVL -0x40(BP), AX
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	WORD $0x458b; BYTE $0xd4	// movl -0x2c(%rbp), %eax	// MOVL -0x2c(BP), AX
	WORD $0x4503; BYTE $0xe4	// addl -0x1c(%rbp), %eax	// ADDL -0x1c(BP), AX
	WORD $0x4589; BYTE $0xcc	// movl %eax, -0x34(%rbp)	// MOVL AX, -0x34(BP)

_lbl_1145:
	WORD $0x458b; BYTE $0xd4	// movl -0x2c(%rbp), %eax	// MOVL -0x2c(BP), AX
	WORD $0x453b; BYTE $0xcc	// cmpl -0x34(%rbp), %eax	// CMPL AX, -0x34(BP)
	LONG $0x42840f; WORD $0x0	// je 0x1193	// JE _lbl_1193
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x98908b48; WORD $0x0; BYTE $0x0	// movq 0x98(%rax), %rdx	// MOVQ 0x98(AX), DX
	WORD $0x458b; BYTE $0xd4	// movl -0x2c(%rbp), %eax	// MOVL -0x2c(BP), AX
	WORD $0x4523; BYTE $0xd0	// andl -0x30(%rbp), %eax	// ANDL -0x30(BP), AX
	WORD $0x4d8b; BYTE $0xd8	// movl -0x28(%rbp), %ecx	// MOVL -0x28(BP), CX
	WORD $0xe0d3	// shll %cl, %eax	// SHLL CX, AX
	WORD $0xc089	// movl %eax, %eax	// MOVL AX, AX
	LONG $0x4e0c148	// shlq $4, %rax	// SHLQ $0x4, AX
	WORD $0x148; BYTE $0xc2	// addq %rax, %rdx	// ADDQ AX, DX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xc84d6348	// movslq -0x38(%rbp), %rcx	// 
	LONG $0xc8148948	// movq %rdx, (%rax, %rcx, 8)	// MOVQ DX, (AX)(CX*8)
	WORD $0x458b; BYTE $0xd4	// movl -0x2c(%rbp), %eax	// MOVL -0x2c(BP), AX
	WORD $0xc083; BYTE $0x1	// addl $1, %eax	// ADDL $0x1, AX
	WORD $0x4589; BYTE $0xd4	// movl %eax, -0x2c(%rbp)	// MOVL AX, -0x2c(BP)
	WORD $0x458b; BYTE $0xc8	// movl -0x38(%rbp), %eax	// MOVL -0x38(BP), AX
	WORD $0xc083; BYTE $0x1	// addl $1, %eax	// ADDL $0x1, AX
	WORD $0x4589; BYTE $0xc8	// movl %eax, -0x38(%rbp)	// MOVL AX, -0x38(BP)
	LONG $0xffffb2e9; BYTE $0xff	// jmp 0x1145	// JMP _lbl_1145

_lbl_1193:
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0x7ce9; BYTE $0x0	// jmp 0x121a	// JMP _lbl_121a

_lbl_119e:
	LONG $0x1df45f6	// testb $1, -0x21(%rbp)	// TESTB $0x1, -0x21(BP)
	LONG $0x5840f; WORD $0x0	// je 0x11ad	// JE _lbl_11ad
	LONG $0x66e9; BYTE $0x0	// jmp 0x1213	// JMP _lbl_1213

_lbl_11ad:
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0xaae8; BYTE $0x0	// callq 0x1260	// CALL ·__native_entry__+4704(SB)
	WORD $0x1a8	// testb $1, %al	// TESTB $0x1, AX
	LONG $0x5850f; WORD $0x0	// jne 0x11c3	// JNE _lbl_11c3
	LONG $0x4be9; BYTE $0x0	// jmp 0x120e	// JMP _lbl_120e

_lbl_11c3:
	LONG $0x1c445c7; WORD $0x0; BYTE $0x0	// movl $1, -0x3c(%rbp)	// MOVL $0x1, -0x3c(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xd080b60f; WORD $0x0; BYTE $0x0	// movzbl 0xd0(%rax), %eax	// 
	WORD $0xe083; BYTE $0x1	// andl $1, %eax	// ANDL $0x1, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x9840f; WORD $0x0	// je 0x11ea	// JE _lbl_11ea
	WORD $0x458b; BYTE $0xc4	// movl -0x3c(%rbp), %eax	// MOVL -0x3c(BP), AX
	WORD $0xc883; BYTE $0x10	// orl $0x10, %eax	// ORL $0x10, AX
	WORD $0x4589; BYTE $0xc4	// movl %eax, -0x3c(%rbp)	// MOVL AX, -0x3c(BP)

_lbl_11ea:
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xccb88b; WORD $0x0	// movl 0xcc(%rax), %edi	// MOVL 0xcc(AX), DI
	WORD $0x4d8b; BYTE $0xc4	// movl -0x3c(%rbp), %ecx	// MOVL -0x3c(BP), CX
	WORD $0xd231	// xorl %edx, %edx	// XORL DX, DX
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x8941; BYTE $0xc0	// movl %eax, %r8d	// MOVL AX, R8
	WORD $0xd689	// movl %edx, %esi	// MOVL DX, SI
	LONG $0x8be8; BYTE $0x0	// callq 0x1290	// CALL ·__native_entry__+4752(SB)
	LONG $0x1df45c6	// movb $1, -0x21(%rbp)	// MOVB $0x1, -0x21(BP)
	LONG $0xfffed4e9; BYTE $0xff	// jmp 0x10e2	// JMP _lbl_10e2

_lbl_120e:
	LONG $0xe9; BYTE $0x0	// jmp 0x1213	// JMP _lbl_1213

_lbl_1213:
	LONG $0xfc45c7; WORD $0x0; BYTE $0x0	// movl $0, -4(%rbp)	// MOVL $0x0, -0x4(BP)

_lbl_121a:
	WORD $0x458b; BYTE $0xfc	// movl -4(%rbp), %eax	// MOVL -0x4(BP), AX
	LONG $0x40c48348	// addq $0x40, %rsp	// ADDQ $0x40, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_cq_ready__off_4656:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0x70408b48	// movq 0x70(%rax), %rax	// MOVQ 0x70(AX), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	WORD $0x4589; BYTE $0xf4	// movl %eax, -0xc(%rbp)	// MOVL AX, -0xc(BP)
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	LONG $0xf84d8b48	// movq -8(%rbp), %rcx	// MOVQ -0x8(BP), CX
	LONG $0x68498b48	// movq 0x68(%rcx), %rcx	// MOVQ 0x68(CX), CX
	WORD $0x12b	// subl (%rcx), %eax	// SUBL (CX), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x9066	// nop	// NOP 

__subr_cq_ring_needs_flush__off_4704:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0x20408b48	// movq 0x20(%rax), %rax	// MOVQ 0x20(AX), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	WORD $0x4589; BYTE $0xf4	// movl %eax, -0xc(%rbp)	// MOVL AX, -0xc(BP)
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0xe083; BYTE $0x6	// andl $6, %eax	// ANDL $0x6, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	WORD $0x950f; BYTE $0xc0	// setne %al	// SETNE AX
	WORD $0x124	// andb $1, %al	// ANDB $0x1, AX
	WORD $0xb60f; BYTE $0xc0	// movzbl %al, %eax	// 
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_____sys_io_uring_enter__off_4752:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	WORD $0x7d89; BYTE $0xfc	// movl %edi, -4(%rbp)	// MOVL DI, -0x4(BP)
	WORD $0x7589; BYTE $0xf8	// movl %esi, -8(%rbp)	// MOVL SI, -0x8(BP)
	WORD $0x5589; BYTE $0xf4	// movl %edx, -0xc(%rbp)	// MOVL DX, -0xc(BP)
	WORD $0x4d89; BYTE $0xf0	// movl %ecx, -0x10(%rbp)	// MOVL CX, -0x10(BP)
	LONG $0xe845894c	// movq %r8, -0x18(%rbp)	// MOVQ R8, -0x18(BP)
	WORD $0x7d8b; BYTE $0xfc	// movl -4(%rbp), %edi	// MOVL -0x4(BP), DI
	WORD $0x758b; BYTE $0xf8	// movl -8(%rbp), %esi	// MOVL -0x8(BP), SI
	WORD $0x558b; BYTE $0xf4	// movl -0xc(%rbp), %edx	// MOVL -0xc(BP), DX
	WORD $0x4d8b; BYTE $0xf0	// movl -0x10(%rbp), %ecx	// MOVL -0x10(BP), CX
	LONG $0xe8458b4c	// movq -0x18(%rbp), %r8	// MOVQ -0x18(BP), R8
	LONG $0x8b941; WORD $0x0	// movl $8, %r9d	// MOVL $0x8, R9
	LONG $0x7fde8; BYTE $0x0	// callq 0x1ac0	// CALL ·__native_entry__+6848(SB)
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x801f0f; WORD $0x0; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr___io_uring_flush_sq__off_4816:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xf0458948	// movq %rax, -0x10(%rbp)	// MOVQ AX, -0x10(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x10408b48	// movq 0x10(%rax), %rax	// MOVQ 0x10(AX), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	WORD $0x4589; BYTE $0xec	// movl %eax, -0x14(%rbp)	// MOVL AX, -0x14(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x8408b48	// movq 8(%rax), %rax	// MOVQ 0x8(AX), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	WORD $0x4589; BYTE $0xe8	// movl %eax, -0x18(%rbp)	// MOVL AX, -0x18(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x408b; BYTE $0x44	// movl 0x44(%rax), %eax	// MOVL 0x44(AX), AX
	LONG $0xf04d8b48	// movq -0x10(%rbp), %rcx	// MOVQ -0x10(BP), CX
	WORD $0x412b; BYTE $0x40	// subl 0x40(%rcx), %eax	// SUBL 0x40(CX), AX
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0xe47d83	// cmpl $0, -0x1c(%rbp)	// CMPL -0x1c(BP), $0x0
	LONG $0x5850f; WORD $0x0	// jne 0x131a	// JNE _lbl_131a
	LONG $0x5de9; BYTE $0x0	// jmp 0x1377	// JMP _lbl_1377

_lbl_131a:
	LONG $0xe9; BYTE $0x0	// jmp 0x131f	// JMP _lbl_131f

_lbl_131f:
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x508b; BYTE $0x40	// movl 0x40(%rax), %edx	// MOVL 0x40(AX), DX
	WORD $0x5523; BYTE $0xec	// andl -0x14(%rbp), %edx	// ANDL -0x14(BP), DX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x30408b48	// movq 0x30(%rax), %rax	// MOVQ 0x30(AX), AX
	WORD $0x4d8b; BYTE $0xe8	// movl -0x18(%rbp), %ecx	// MOVL -0x18(BP), CX
	WORD $0x4d23; BYTE $0xec	// andl -0x14(%rbp), %ecx	// ANDL -0x14(BP), CX
	WORD $0xc989	// movl %ecx, %ecx	// MOVL CX, CX
	WORD $0x1489; BYTE $0x88	// movl %edx, (%rax, %rcx, 4)	// MOVL DX, (AX)(CX*4)
	WORD $0x458b; BYTE $0xe8	// movl -0x18(%rbp), %eax	// MOVL -0x18(BP), AX
	WORD $0xc083; BYTE $0x1	// addl $1, %eax	// ADDL $0x1, AX
	WORD $0x4589; BYTE $0xe8	// movl %eax, -0x18(%rbp)	// MOVL AX, -0x18(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x488b; BYTE $0x40	// movl 0x40(%rax), %ecx	// MOVL 0x40(AX), CX
	WORD $0xc183; BYTE $0x1	// addl $1, %ecx	// ADDL $0x1, CX
	WORD $0x4889; BYTE $0x40	// movl %ecx, 0x40(%rax)	// MOVL CX, 0x40(AX)
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0xc083; BYTE $0xff	// addl $-1, %eax	// ADDL $-0x1, AX
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0xffbb850f; WORD $0xffff	// jne 0x131f	// JNE _lbl_131f
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x8408b48	// movq 8(%rax), %rax	// MOVQ 0x8(AX), AX
	WORD $0x4d8b; BYTE $0xe8	// movl -0x18(%rbp), %ecx	// MOVL -0x18(BP), CX
	WORD $0x4d89; BYTE $0xe0	// movl %ecx, -0x20(%rbp)	// MOVL CX, -0x20(BP)
	WORD $0x4d8b; BYTE $0xe0	// movl -0x20(%rbp), %ecx	// MOVL -0x20(BP), CX
	WORD $0x889	// movl %ecx, (%rax)	// MOVL CX, (AX)

_lbl_1377:
	WORD $0x458b; BYTE $0xe8	// movl -0x18(%rbp), %eax	// MOVL -0x18(BP), AX
	LONG $0xf04d8b48	// movq -0x10(%rbp), %rcx	// MOVQ -0x10(BP), CX
	WORD $0x8b48; BYTE $0x9	// movq (%rcx), %rcx	// MOVQ (CX), CX
	WORD $0x12b	// subl (%rcx), %eax	// SUBL (CX), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	BYTE $0x90	// nop	// NOP 

__subr_io_uring_wait_cqes__off_5008:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x40ec8348	// subq $0x40, %rsp	// SUBQ $0x40, SP
	LONG $0xf07d8948	// movq %rdi, -0x10(%rbp)	// MOVQ DI, -0x10(BP)
	LONG $0xe8758948	// movq %rsi, -0x18(%rbp)	// MOVQ SI, -0x18(BP)
	WORD $0x5589; BYTE $0xe4	// movl %edx, -0x1c(%rbp)	// MOVL DX, -0x1c(BP)
	LONG $0xd84d8948	// movq %rcx, -0x28(%rbp)	// MOVQ CX, -0x28(BP)
	LONG $0xd045894c	// movq %r8, -0x30(%rbp)	// MOVQ R8, -0x30(BP)
	LONG $0xcc45c7; WORD $0x0; BYTE $0x0	// movl $0, -0x34(%rbp)	// MOVL $0x0, -0x34(BP)
	LONG $0xd87d8348; BYTE $0x0	// cmpq $0, -0x28(%rbp)	// CMPQ -0x28(BP), $0x0
	LONG $0x65840f; WORD $0x0	// je 0x1422	// JE _lbl_1422
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xc8808b; WORD $0x0	// movl 0xc8(%rax), %eax	// MOVL 0xc8(AX), AX
	LONG $0x10025; BYTE $0x0	// andl $0x100, %eax	// ANDL $0x100, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x20840f; WORD $0x0	// je 0x13f5	// JE _lbl_13f5
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0xe8758b48	// movq -0x18(%rbp), %rsi	// MOVQ -0x18(BP), SI
	WORD $0x558b; BYTE $0xe4	// movl -0x1c(%rbp), %edx	// MOVL -0x1c(BP), DX
	LONG $0xd84d8b48	// movq -0x28(%rbp), %rcx	// MOVQ -0x28(BP), CX
	LONG $0xd0458b4c	// movq -0x30(%rbp), %r8	// MOVQ -0x30(BP), R8
	LONG $0x63e8; BYTE $0x0	// callq 0x1450	// CALL ·__native_entry__+5200(SB)
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0x47e9; BYTE $0x0	// jmp 0x143c	// JMP _lbl_143c

_lbl_13f5:
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	WORD $0x758b; BYTE $0xe4	// movl -0x1c(%rbp), %esi	// MOVL -0x1c(BP), SI
	LONG $0xd8558b48	// movq -0x28(%rbp), %rdx	// MOVQ -0x28(BP), DX
	LONG $0xcbe8; BYTE $0x0	// callq 0x14d0	// CALL ·__native_entry__+5328(SB)
	WORD $0x4589; BYTE $0xcc	// movl %eax, -0x34(%rbp)	// MOVL AX, -0x34(BP)
	LONG $0xcc7d83	// cmpl $0, -0x34(%rbp)	// CMPL -0x34(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x141d	// JGE _lbl_141d
	WORD $0x458b; BYTE $0xcc	// movl -0x34(%rbp), %eax	// MOVL -0x34(BP), AX
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0x1fe9; BYTE $0x0	// jmp 0x143c	// JMP _lbl_143c

_lbl_141d:
	LONG $0xe9; BYTE $0x0	// jmp 0x1422	// JMP _lbl_1422

_lbl_1422:
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0xe8758b48	// movq -0x18(%rbp), %rsi	// MOVQ -0x18(BP), SI
	WORD $0x558b; BYTE $0xcc	// movl -0x34(%rbp), %edx	// MOVL -0x34(BP), DX
	WORD $0x4d8b; BYTE $0xe4	// movl -0x1c(%rbp), %ecx	// MOVL -0x1c(BP), CX
	LONG $0xd0458b4c	// movq -0x30(%rbp), %r8	// MOVQ -0x30(BP), R8
	LONG $0xfffa57e8; BYTE $0xff	// callq 0xe90	// CALL ·__native_entry__+3728(SB)
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)

_lbl_143c:
	WORD $0x458b; BYTE $0xfc	// movl -4(%rbp), %eax	// MOVL -0x4(BP), AX
	LONG $0x40c48348	// addq $0x40, %rsp	// ADDQ $0x40, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	BYTE $0x90	// nop	// NOP 

__subr_io_uring_wait_cqes_new__off_5200:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x60ec8348	// subq $0x60, %rsp	// SUBQ $0x60, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x5589; BYTE $0xec	// movl %edx, -0x14(%rbp)	// MOVL DX, -0x14(BP)
	LONG $0xe04d8948	// movq %rcx, -0x20(%rbp)	// MOVQ CX, -0x20(BP)
	LONG $0xd845894c	// movq %r8, -0x28(%rbp)	// MOVQ R8, -0x28(BP)
	LONG $0xd8458b48	// movq -0x28(%rbp), %rax	// MOVQ -0x28(BP), AX
	LONG $0xc0458948	// movq %rax, -0x40(%rbp)	// MOVQ AX, -0x40(BP)
	LONG $0x8c845c7; WORD $0x0; BYTE $0x0	// movl $8, -0x38(%rbp)	// MOVL $0x8, -0x38(BP)
	LONG $0xcc45c7; WORD $0x0; BYTE $0x0	// movl $0, -0x34(%rbp)	// MOVL $0x0, -0x34(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0xd0458948	// movq %rax, -0x30(%rbp)	// MOVQ AX, -0x30(BP)
	LONG $0xa845c7; WORD $0x0; BYTE $0x0	// movl $0, -0x58(%rbp)	// MOVL $0x0, -0x58(BP)
	WORD $0x458b; BYTE $0xec	// movl -0x14(%rbp), %eax	// MOVL -0x14(BP), AX
	WORD $0x4589; BYTE $0xac	// movl %eax, -0x54(%rbp)	// MOVL AX, -0x54(BP)
	LONG $0x8b045c7; WORD $0x0; BYTE $0x0	// movl $8, -0x50(%rbp)	// MOVL $0x8, -0x50(BP)
	LONG $0x18b445c7; WORD $0x0; BYTE $0x0	// movl $0x18, -0x4c(%rbp)	// MOVL $0x18, -0x4c(BP)
	LONG $0xc0458d48	// leaq -0x40(%rbp), %rax	// LEAQ -0x40(BP), AX
	LONG $0xb8458948	// movq %rax, -0x48(%rbp)	// MOVQ AX, -0x48(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	LONG $0xa8558d48	// leaq -0x58(%rbp), %rdx	// LEAQ -0x58(BP), DX
	LONG $0xfffa33e8; BYTE $0xff	// callq 0xef0	// CALL ·__native_entry__+3824(SB)
	LONG $0x60c48348	// addq $0x60, %rsp	// ADDQ $0x60, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr___io_uring_submit_timeout__off_5328:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x30ec8348	// subq $0x30, %rsp	// SUBQ $0x30, SP
	LONG $0xf07d8948	// movq %rdi, -0x10(%rbp)	// MOVQ DI, -0x10(BP)
	WORD $0x7589; BYTE $0xec	// movl %esi, -0x14(%rbp)	// MOVL SI, -0x14(BP)
	LONG $0xe0558948	// movq %rdx, -0x20(%rbp)	// MOVQ DX, -0x20(BP)
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0x264e8; BYTE $0x0	// callq 0x1750	// CALL ·__native_entry__+5968(SB)
	LONG $0xd8458948	// movq %rax, -0x28(%rbp)	// MOVQ AX, -0x28(BP)
	LONG $0xd87d8348; BYTE $0x0	// cmpq $0, -0x28(%rbp)	// CMPQ -0x28(BP), $0x0
	LONG $0x4a850f; WORD $0x0	// jne 0x1545	// JNE _lbl_1545
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0x1bce8; BYTE $0x0	// callq 0x16c0	// CALL ·__native_entry__+5824(SB)
	WORD $0x4589; BYTE $0xd4	// movl %eax, -0x2c(%rbp)	// MOVL AX, -0x2c(BP)
	LONG $0xd47d83	// cmpl $0, -0x2c(%rbp)	// CMPL -0x2c(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x151c	// JGE _lbl_151c
	WORD $0x458b; BYTE $0xd4	// movl -0x2c(%rbp), %eax	// MOVL -0x2c(BP), AX
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0x53e9; BYTE $0x0	// jmp 0x156f	// JMP _lbl_156f

_lbl_151c:
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0x22be8; BYTE $0x0	// callq 0x1750	// CALL ·__native_entry__+5968(SB)
	LONG $0xd8458948	// movq %rax, -0x28(%rbp)	// MOVQ AX, -0x28(BP)
	LONG $0xd87d8348; BYTE $0x0	// cmpq $0, -0x28(%rbp)	// CMPQ -0x28(BP), $0x0
	LONG $0xc850f; WORD $0x0	// jne 0x1540	// JNE _lbl_1540
	LONG $0xf5fc45c7; WORD $0xffff; BYTE $0xff	// movl $0xfffffff5, -4(%rbp)	// MOVL $0xfffffff5, -0x4(BP)
	LONG $0x2fe9; BYTE $0x0	// jmp 0x156f	// JMP _lbl_156f

_lbl_1540:
	LONG $0xe9; BYTE $0x0	// jmp 0x1545	// JMP _lbl_1545

_lbl_1545:
	LONG $0xd87d8b48	// movq -0x28(%rbp), %rdi	// MOVQ -0x28(BP), DI
	LONG $0xe0758b48	// movq -0x20(%rbp), %rsi	// MOVQ -0x20(BP), SI
	WORD $0x558b; BYTE $0xec	// movl -0x14(%rbp), %edx	// MOVL -0x14(BP), DX
	WORD $0xc931	// xorl %ecx, %ecx	// XORL CX, CX
	LONG $0x609e8; BYTE $0x0	// callq 0x1b60	// CALL ·__native_entry__+7008(SB)
	LONG $0xd8458b48	// movq -0x28(%rbp), %rax	// MOVQ -0x28(BP), AX
	QUAD $0xffffffff2040c748	// movq $-1, 0x20(%rax)	// MOVQ $-0x1, 0x20(AX)
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0xfffd64e8; BYTE $0xff	// callq 0x12d0	// CALL ·__native_entry__+4816(SB)
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)

_lbl_156f:
	WORD $0x458b; BYTE $0xfc	// movl -4(%rbp), %eax	// MOVL -0x4(BP), AX
	LONG $0x30c48348	// addq $0x30, %rsp	// ADDQ $0x30, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_io_uring_submit_and_wait_timeout__off_5504:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x70ec8348	// subq $0x70, %rsp	// SUBQ $0x70, SP
	LONG $0xf07d8948	// movq %rdi, -0x10(%rbp)	// MOVQ DI, -0x10(BP)
	LONG $0xe8758948	// movq %rsi, -0x18(%rbp)	// MOVQ SI, -0x18(BP)
	WORD $0x5589; BYTE $0xe4	// movl %edx, -0x1c(%rbp)	// MOVL DX, -0x1c(BP)
	LONG $0xd84d8948	// movq %rcx, -0x28(%rbp)	// MOVQ CX, -0x28(BP)
	LONG $0xd045894c	// movq %r8, -0x30(%rbp)	// MOVQ R8, -0x30(BP)
	LONG $0xd87d8348; BYTE $0x0	// cmpq $0, -0x28(%rbp)	// CMPQ -0x28(BP), $0x0
	LONG $0xa4840f; WORD $0x0	// je 0x164a	// JE _lbl_164a
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xc8808b; WORD $0x0	// movl 0xc8(%rax), %eax	// MOVL 0xc8(AX), AX
	LONG $0x10025; BYTE $0x0	// andl $0x100, %eax	// ANDL $0x100, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x5f840f; WORD $0x0	// je 0x161d	// JE _lbl_161d
	LONG $0xd0458b48	// movq -0x30(%rbp), %rax	// MOVQ -0x30(BP), AX
	LONG $0xb0458948	// movq %rax, -0x50(%rbp)	// MOVQ AX, -0x50(BP)
	LONG $0x8b845c7; WORD $0x0; BYTE $0x0	// movl $8, -0x48(%rbp)	// MOVL $0x8, -0x48(BP)
	LONG $0xbc45c7; WORD $0x0; BYTE $0x0	// movl $0, -0x44(%rbp)	// MOVL $0x0, -0x44(BP)
	LONG $0xd8458b48	// movq -0x28(%rbp), %rax	// MOVQ -0x28(BP), AX
	LONG $0xc0458948	// movq %rax, -0x40(%rbp)	// MOVQ AX, -0x40(BP)
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0xfffcebe8; BYTE $0xff	// callq 0x12d0	// CALL ·__native_entry__+4816(SB)
	WORD $0x4589; BYTE $0x98	// movl %eax, -0x68(%rbp)	// MOVL AX, -0x68(BP)
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0x4589; BYTE $0x9c	// movl %eax, -0x64(%rbp)	// MOVL AX, -0x64(BP)
	LONG $0x8a045c7; WORD $0x0; BYTE $0x0	// movl $8, -0x60(%rbp)	// MOVL $0x8, -0x60(BP)
	LONG $0x18a445c7; WORD $0x0; BYTE $0x0	// movl $0x18, -0x5c(%rbp)	// MOVL $0x18, -0x5c(BP)
	LONG $0xb0458d48	// leaq -0x50(%rbp), %rax	// LEAQ -0x50(BP), AX
	LONG $0xa8458948	// movq %rax, -0x58(%rbp)	// MOVQ AX, -0x58(BP)
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0xe8758b48	// movq -0x18(%rbp), %rsi	// MOVQ -0x18(BP), SI
	LONG $0x98558d48	// leaq -0x68(%rbp), %rdx	// LEAQ -0x68(BP), DX
	LONG $0xfff8dbe8; BYTE $0xff	// callq 0xef0	// CALL ·__native_entry__+3824(SB)
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0x53e9; BYTE $0x0	// jmp 0x1670	// JMP _lbl_1670

_lbl_161d:
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	WORD $0x758b; BYTE $0xe4	// movl -0x1c(%rbp), %esi	// MOVL -0x1c(BP), SI
	LONG $0xd8558b48	// movq -0x28(%rbp), %rdx	// MOVQ -0x28(BP), DX
	LONG $0xfffea3e8; BYTE $0xff	// callq 0x14d0	// CALL ·__native_entry__+5328(SB)
	WORD $0x4589; BYTE $0xcc	// movl %eax, -0x34(%rbp)	// MOVL AX, -0x34(BP)
	LONG $0xcc7d83	// cmpl $0, -0x34(%rbp)	// CMPL -0x34(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x1645	// JGE _lbl_1645
	WORD $0x458b; BYTE $0xcc	// movl -0x34(%rbp), %eax	// MOVL -0x34(BP), AX
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0x2be9; BYTE $0x0	// jmp 0x1670	// JMP _lbl_1670

_lbl_1645:
	LONG $0xce9; BYTE $0x0	// jmp 0x1656	// JMP _lbl_1656

_lbl_164a:
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0xfffc7de8; BYTE $0xff	// callq 0x12d0	// CALL ·__native_entry__+4816(SB)
	WORD $0x4589; BYTE $0xcc	// movl %eax, -0x34(%rbp)	// MOVL AX, -0x34(BP)

_lbl_1656:
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0xe8758b48	// movq -0x18(%rbp), %rsi	// MOVQ -0x18(BP), SI
	WORD $0x558b; BYTE $0xcc	// movl -0x34(%rbp), %edx	// MOVL -0x34(BP), DX
	WORD $0x4d8b; BYTE $0xe4	// movl -0x1c(%rbp), %ecx	// MOVL -0x1c(BP), CX
	LONG $0xd0458b4c	// movq -0x30(%rbp), %r8	// MOVQ -0x30(BP), R8
	LONG $0xfff823e8; BYTE $0xff	// callq 0xe90	// CALL ·__native_entry__+3728(SB)
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)

_lbl_1670:
	WORD $0x458b; BYTE $0xfc	// movl -4(%rbp), %eax	// MOVL -0x4(BP), AX
	LONG $0x70c48348	// addq $0x70, %rsp	// ADDQ $0x70, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x801f0f; WORD $0x0; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_wait_cqe_timeout__off_5760:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	LONG $0xe8558948	// movq %rdx, -0x18(%rbp)	// MOVQ DX, -0x18(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	LONG $0xe84d8b48	// movq -0x18(%rbp), %rcx	// MOVQ -0x18(BP), CX
	LONG $0x1ba; BYTE $0x0	// movl $1, %edx	// MOVL $0x1, DX
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x8941; BYTE $0xc0	// movl %eax, %r8d	// MOVL AX, R8
	LONG $0xfffce1e8; BYTE $0xff	// callq 0x1390	// CALL ·__native_entry__+5008(SB)
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	BYTE $0x90	// nop	// NOP 

__subr_io_uring_submit__off_5824:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	WORD $0xf631	// xorl %esi, %esi	// XORL SI, SI
	LONG $0x9e8; BYTE $0x0	// callq 0x16e0	// CALL ·__native_entry__+5856(SB)
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr___io_uring_submit_and_wait__off_5856:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xfffbd0e8; BYTE $0xff	// callq 0x12d0	// CALL ·__native_entry__+4816(SB)
	LONG $0xe87d8b48	// movq -0x18(%rbp), %rdi	// MOVQ -0x18(BP), DI
	WORD $0xc689	// movl %eax, %esi	// MOVL AX, SI
	WORD $0x558b; BYTE $0xf4	// movl -0xc(%rbp), %edx	// MOVL -0xc(BP), DX
	LONG $0x552e8; BYTE $0x0	// callq 0x1c60	// CALL ·__native_entry__+7264(SB)
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x9066	// nop	// NOP 

__subr_io_uring_submit_and_wait__off_5920:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	WORD $0x758b; BYTE $0xf4	// movl -0xc(%rbp), %esi	// MOVL -0xc(BP), SI
	LONG $0xffffa5e8; BYTE $0xff	// callq 0x16e0	// CALL ·__native_entry__+5856(SB)
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_io_uring_get_sqe__off_5968:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xbe8; BYTE $0x0	// callq 0x1770	// CALL ·__native_entry__+6000(SB)
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr__io_uring_get_sqe__off_6000:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf07d8948	// movq %rdi, -0x10(%rbp)	// MOVQ DI, -0x10(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x8b48; BYTE $0x0	// movq (%rax), %rax	// MOVQ (AX), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	WORD $0x4589; BYTE $0xe0	// movl %eax, -0x20(%rbp)	// MOVL AX, -0x20(BP)
	WORD $0x458b; BYTE $0xe0	// movl -0x20(%rbp), %eax	// MOVL -0x20(BP), AX
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x408b; BYTE $0x44	// movl 0x44(%rax), %eax	// MOVL 0x44(AX), AX
	WORD $0xc083; BYTE $0x1	// addl $1, %eax	// ADDL $0x1, AX
	WORD $0x4589; BYTE $0xdc	// movl %eax, -0x24(%rbp)	// MOVL AX, -0x24(BP)
	LONG $0xd845c7; WORD $0x0; BYTE $0x0	// movl $0, -0x28(%rbp)	// MOVL $0x0, -0x28(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xc0808b; WORD $0x0	// movl 0xc0(%rax), %eax	// MOVL 0xc0(AX), AX
	LONG $0x40025; BYTE $0x0	// andl $0x400, %eax	// ANDL $0x400, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x7840f; WORD $0x0	// je 0x17c5	// JE _lbl_17c5
	LONG $0x1d845c7; WORD $0x0; BYTE $0x0	// movl $1, -0x28(%rbp)	// MOVL $0x1, -0x28(BP)

_lbl_17c5:
	WORD $0x458b; BYTE $0xdc	// movl -0x24(%rbp), %eax	// MOVL -0x24(BP), AX
	WORD $0x452b; BYTE $0xe4	// subl -0x1c(%rbp), %eax	// SUBL -0x1c(BP), AX
	LONG $0xe84d8b48	// movq -0x18(%rbp), %rcx	// MOVQ -0x18(BP), CX
	LONG $0x18498b48	// movq 0x18(%rcx), %rcx	// MOVQ 0x18(CX), CX
	WORD $0x13b	// cmpl (%rcx), %eax	// CMPL AX, (CX)
	LONG $0x44870f; WORD $0x0	// ja 0x181f	// JA _lbl_181f
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x38408b48	// movq 0x38(%rax), %rax	// MOVQ 0x38(AX), AX
	LONG $0xe84d8b48	// movq -0x18(%rbp), %rcx	// MOVQ -0x18(BP), CX
	WORD $0x518b; BYTE $0x44	// movl 0x44(%rcx), %edx	// MOVL 0x44(CX), DX
	LONG $0xe84d8b48	// movq -0x18(%rbp), %rcx	// MOVQ -0x18(BP), CX
	LONG $0x10498b48	// movq 0x10(%rcx), %rcx	// MOVQ 0x10(CX), CX
	WORD $0x1123	// andl (%rcx), %edx	// ANDL (CX), DX
	WORD $0x4d8b; BYTE $0xd8	// movl -0x28(%rbp), %ecx	// MOVL -0x28(BP), CX
	WORD $0xe2d3	// shll %cl, %edx	// SHLL CX, DX
	WORD $0xd189	// movl %edx, %ecx	// MOVL DX, CX
	WORD $0xc989	// movl %ecx, %ecx	// MOVL CX, CX
	LONG $0x6e1c148	// shlq $6, %rcx	// SHLQ $0x6, CX
	WORD $0x148; BYTE $0xc8	// addq %rcx, %rax	// ADDQ CX, AX
	LONG $0xd0458948	// movq %rax, -0x30(%rbp)	// MOVQ AX, -0x30(BP)
	WORD $0x4d8b; BYTE $0xdc	// movl -0x24(%rbp), %ecx	// MOVL -0x24(BP), CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x4889; BYTE $0x44	// movl %ecx, 0x44(%rax)	// MOVL CX, 0x44(AX)
	LONG $0xd0458b48	// movq -0x30(%rbp), %rax	// MOVQ -0x30(BP), AX
	LONG $0xf8458948	// movq %rax, -8(%rbp)	// MOVQ AX, -0x8(BP)
	LONG $0x8e9; BYTE $0x0	// jmp 0x1827	// JMP _lbl_1827

_lbl_181f:
	QUAD $0xf845c748	// movq $0, -8(%rbp)	// MOVQ $0x0, -0x8(BP)

_lbl_1827:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr___io_uring_sqring_wait__off_6192:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0x4f445c7; WORD $0x0; BYTE $0x0	// movl $4, -0xc(%rbp)	// MOVL $0x4, -0xc(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xd080b60f; WORD $0x0; BYTE $0x0	// movzbl 0xd0(%rax), %eax	// 
	WORD $0xe083; BYTE $0x1	// andl $1, %eax	// ANDL $0x1, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x9840f; WORD $0x0	// je 0x1863	// JE _lbl_1863
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0xc883; BYTE $0x10	// orl $0x10, %eax	// ORL $0x10, AX
	WORD $0x4589; BYTE $0xf4	// movl %eax, -0xc(%rbp)	// MOVL AX, -0xc(BP)

_lbl_1863:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xccb88b; WORD $0x0	// movl 0xcc(%rax), %edi	// MOVL 0xcc(AX), DI
	WORD $0x4d8b; BYTE $0xf4	// movl -0xc(%rbp), %ecx	// MOVL -0xc(BP), CX
	WORD $0xd231	// xorl %edx, %edx	// XORL DX, DX
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x8941; BYTE $0xc0	// movl %eax, %r8d	// MOVL AX, R8
	WORD $0xd689	// movl %edx, %esi	// MOVL DX, SI
	LONG $0xfffa12e8; BYTE $0xff	// callq 0x1290	// CALL ·__native_entry__+4752(SB)
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x9066	// nop	// NOP 

__subr___io_uring_peek_cqe__off_6288:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x40ec8348	// subq $0x40, %rsp	// SUBQ $0x40, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	LONG $0xe8558948	// movq %rdx, -0x18(%rbp)	// MOVQ DX, -0x18(BP)
	LONG $0xdc45c7; WORD $0x0; BYTE $0x0	// movl $0, -0x24(%rbp)	// MOVL $0x0, -0x24(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0x78408b48	// movq 0x78(%rax), %rax	// MOVQ 0x78(AX), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	WORD $0x4589; BYTE $0xd4	// movl %eax, -0x2c(%rbp)	// MOVL AX, -0x2c(BP)
	LONG $0xd045c7; WORD $0x0; BYTE $0x0	// movl $0, -0x30(%rbp)	// MOVL $0x0, -0x30(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc0808b; WORD $0x0	// movl 0xc0(%rax), %eax	// MOVL 0xc0(AX), AX
	LONG $0x80025; BYTE $0x0	// andl $0x800, %eax	// ANDL $0x800, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x7840f; WORD $0x0	// je 0x18de	// JE _lbl_18de
	LONG $0x1d045c7; WORD $0x0; BYTE $0x0	// movl $1, -0x30(%rbp)	// MOVL $0x1, -0x30(BP)

_lbl_18de:
	LONG $0xe9; BYTE $0x0	// jmp 0x18e3	// JMP _lbl_18e3

_lbl_18e3:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0x70408b48	// movq 0x70(%rax), %rax	// MOVQ 0x70(AX), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	WORD $0x4589; BYTE $0xc8	// movl %eax, -0x38(%rbp)	// MOVL AX, -0x38(BP)
	WORD $0x458b; BYTE $0xc8	// movl -0x38(%rbp), %eax	// MOVL -0x38(BP), AX
	WORD $0x4589; BYTE $0xcc	// movl %eax, -0x34(%rbp)	// MOVL AX, -0x34(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0x68408b48	// movq 0x68(%rax), %rax	// MOVQ 0x68(AX), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	WORD $0x4589; BYTE $0xc4	// movl %eax, -0x3c(%rbp)	// MOVL AX, -0x3c(BP)
	QUAD $0xe045c748	// movq $0, -0x20(%rbp)	// MOVQ $0x0, -0x20(BP)
	WORD $0x458b; BYTE $0xcc	// movl -0x34(%rbp), %eax	// MOVL -0x34(BP), AX
	WORD $0x452b; BYTE $0xc4	// subl -0x3c(%rbp), %eax	// SUBL -0x3c(BP), AX
	WORD $0x4589; BYTE $0xd8	// movl %eax, -0x28(%rbp)	// MOVL AX, -0x28(BP)
	LONG $0xd87d83	// cmpl $0, -0x28(%rbp)	// CMPL -0x28(BP), $0x0
	LONG $0x5850f; WORD $0x0	// jne 0x1923	// JNE _lbl_1923
	LONG $0x9ce9; BYTE $0x0	// jmp 0x19bf	// JMP _lbl_19bf

_lbl_1923:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0x98808b48; WORD $0x0; BYTE $0x0	// movq 0x98(%rax), %rax	// MOVQ 0x98(AX), AX
	WORD $0x558b; BYTE $0xc4	// movl -0x3c(%rbp), %edx	// MOVL -0x3c(BP), DX
	WORD $0x5523; BYTE $0xd4	// andl -0x2c(%rbp), %edx	// ANDL -0x2c(BP), DX
	WORD $0x4d8b; BYTE $0xd0	// movl -0x30(%rbp), %ecx	// MOVL -0x30(BP), CX
	WORD $0xe2d3	// shll %cl, %edx	// SHLL CX, DX
	WORD $0xd189	// movl %edx, %ecx	// MOVL DX, CX
	WORD $0xc989	// movl %ecx, %ecx	// MOVL CX, CX
	LONG $0x4e1c148	// shlq $4, %rcx	// SHLQ $0x4, CX
	WORD $0x148; BYTE $0xc8	// addq %rcx, %rax	// ADDQ CX, AX
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc8808b; WORD $0x0	// movl 0xc8(%rax), %eax	// MOVL 0xc8(AX), AX
	LONG $0x10025; BYTE $0x0	// andl $0x100, %eax	// ANDL $0x100, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x4b850f; WORD $0x0	// jne 0x19ab	// JNE _lbl_19ab
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0xff388348	// cmpq $-1, (%rax)	// CMPQ (AX), $-0x1
	LONG $0x3d850f; WORD $0x0	// jne 0x19ab	// JNE _lbl_19ab
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x87883	// cmpl $0, 8(%rax)	// CMPL 0x8(AX), $0x0
	LONG $0xa8d0f; WORD $0x0	// jge 0x1986	// JGE _lbl_1986
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	WORD $0x408b; BYTE $0x8	// movl 8(%rax), %eax	// MOVL 0x8(AX), AX
	WORD $0x4589; BYTE $0xdc	// movl %eax, -0x24(%rbp)	// MOVL AX, -0x24(BP)

_lbl_1986:
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0x1be; BYTE $0x0	// movl $1, %esi	// MOVL $0x1, SI
	LONG $0x18ce8; BYTE $0x0	// callq 0x1b20	// CALL ·__native_entry__+6944(SB)
	LONG $0xdc7d83	// cmpl $0, -0x24(%rbp)	// CMPL -0x24(BP), $0x0
	LONG $0x5850f; WORD $0x0	// jne 0x19a3	// JNE _lbl_19a3
	LONG $0xde9; BYTE $0x0	// jmp 0x19b0	// JMP _lbl_19b0

_lbl_19a3:
	QUAD $0xe045c748	// movq $0, -0x20(%rbp)	// MOVQ $0x0, -0x20(BP)

_lbl_19ab:
	LONG $0xfe9; BYTE $0x0	// jmp 0x19bf	// JMP _lbl_19bf

_lbl_19b0:
	WORD $0x1b0	// movb $1, %al	// MOVB $0x1, AX
	WORD $0x1a8	// testb $1, %al	// TESTB $0x1, AX
	LONG $0xff29850f; WORD $0xffff	// jne 0x18e3	// JNE _lbl_18e3
	LONG $0xe9; BYTE $0x0	// jmp 0x19bf	// JMP _lbl_19bf

_lbl_19bf:
	LONG $0xe04d8b48	// movq -0x20(%rbp), %rcx	// MOVQ -0x20(BP), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x8948; BYTE $0x8	// movq %rcx, (%rax)	// MOVQ CX, (AX)
	LONG $0xe87d8348; BYTE $0x0	// cmpq $0, -0x18(%rbp)	// CMPQ -0x18(BP), $0x0
	LONG $0x9840f; WORD $0x0	// je 0x19de	// JE _lbl_19de
	WORD $0x4d8b; BYTE $0xd8	// movl -0x28(%rbp), %ecx	// MOVL -0x28(BP), CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x889	// movl %ecx, (%rax)	// MOVL CX, (AX)

_lbl_19de:
	WORD $0x458b; BYTE $0xdc	// movl -0x24(%rbp), %eax	// MOVL -0x24(BP), AX
	LONG $0x40c48348	// addq $0x40, %rsp	// ADDQ $0x40, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f66; BYTE $0x0	// nopw (%rax, %rax)	// NOPW (AX)(AX*1)

__subr_cq_ring_needs_enter__off_6640:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc0888b; WORD $0x0	// movl 0xc0(%rax), %ecx	// MOVL 0xc0(AX), CX
	WORD $0xe183; BYTE $0x1	// andl $1, %ecx	// ANDL $0x1, CX
	WORD $0x1b0	// movb $1, %al	// MOVB $0x1, AX
	WORD $0xf983; BYTE $0x0	// cmpl $0, %ecx	// CMPL CX, $0x0
	WORD $0x4588; BYTE $0xf7	// movb %al, -9(%rbp)	// MOVB AX, -0x9(BP)
	LONG $0xc850f; WORD $0x0	// jne 0x1a23	// JNE _lbl_1a23
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xfff840e8; BYTE $0xff	// callq 0x1260	// CALL ·__native_entry__+4704(SB)
	WORD $0x4588; BYTE $0xf7	// movb %al, -9(%rbp)	// MOVB AX, -0x9(BP)

_lbl_1a23:
	WORD $0x458a; BYTE $0xf7	// movb -9(%rbp), %al	// MOVB -0x9(BP), AX
	WORD $0x124	// andb $1, %al	// ANDB $0x1, AX
	WORD $0xb60f; BYTE $0xc0	// movzbl %al, %eax	// 
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_sq_ring_needs_enter__off_6720:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf07d8948	// movq %rdi, -0x10(%rbp)	// MOVQ DI, -0x10(BP)
	LONG $0xe8758948	// movq %rsi, -0x18(%rbp)	// MOVQ SI, -0x18(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xc0808b; WORD $0x0	// movl 0xc0(%rax), %eax	// MOVL 0xc0(AX), AX
	WORD $0xe083; BYTE $0x2	// andl $2, %eax	// ANDL $0x2, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x9850f; WORD $0x0	// jne 0x1a6b	// JNE _lbl_1a6b
	LONG $0x1ff45c6	// movb $1, -1(%rbp)	// MOVB $0x1, -0x1(BP)
	LONG $0x49e9; BYTE $0x0	// jmp 0x1ab4	// JMP _lbl_1ab4

_lbl_1a6b:
	WORD $0xae0f; BYTE $0xf0	// mfence	// MFENCE 
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x20408b48	// movq 0x20(%rax), %rax	// MOVQ 0x20(AX), AX
	WORD $0x8b	// movl (%rax), %eax	// MOVL (AX), AX
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0xe083; BYTE $0x1	// andl $1, %eax	// ANDL $0x1, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	WORD $0x950f; BYTE $0xc0	// setne %al	// SETNE AX
	WORD $0xff34	// xorb $0xff, %al	// XORB $0xff, AX
	WORD $0xff34	// xorb $0xff, %al	// XORB $0xff, AX
	WORD $0x124	// andb $1, %al	// ANDB $0x1, AX
	WORD $0xb60f; BYTE $0xc0	// movzbl %al, %eax	// 
	WORD $0x9848	// cltq	// 
	LONG $0xf88348	// cmpq $0, %rax	// CMPQ AX, $0x0
	LONG $0x14840f; WORD $0x0	// je 0x1ab0	// JE _lbl_1ab0
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x88b	// movl (%rax), %ecx	// MOVL (AX), CX
	WORD $0xc983; BYTE $0x2	// orl $2, %ecx	// ORL $0x2, CX
	WORD $0x889	// movl %ecx, (%rax)	// MOVL CX, (AX)
	LONG $0x1ff45c6	// movb $1, -1(%rbp)	// MOVB $0x1, -0x1(BP)
	LONG $0x4e9; BYTE $0x0	// jmp 0x1ab4	// JMP _lbl_1ab4

_lbl_1ab0:
	LONG $0xff45c6	// movb $0, -1(%rbp)	// MOVB $0x0, -0x1(BP)

_lbl_1ab4:
	WORD $0x458a; BYTE $0xff	// movb -1(%rbp), %al	// MOVB -0x1(BP), AX
	WORD $0x124	// andb $1, %al	// ANDB $0x1, AX
	WORD $0xb60f; BYTE $0xc0	// movzbl %al, %eax	// 
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x9066	// nop	// NOP 

__subr_____sys_io_uring_enter2__off_6848:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	WORD $0x7d89; BYTE $0xfc	// movl %edi, -4(%rbp)	// MOVL DI, -0x4(BP)
	WORD $0x7589; BYTE $0xf8	// movl %esi, -8(%rbp)	// MOVL SI, -0x8(BP)
	WORD $0x5589; BYTE $0xf4	// movl %edx, -0xc(%rbp)	// MOVL DX, -0xc(BP)
	WORD $0x4d89; BYTE $0xf0	// movl %ecx, -0x10(%rbp)	// MOVL CX, -0x10(BP)
	LONG $0xe845894c	// movq %r8, -0x18(%rbp)	// MOVQ R8, -0x18(BP)
	LONG $0xe44d8944	// movl %r9d, -0x1c(%rbp)	// MOVL R9, -0x1c(BP)
	WORD $0x458b; BYTE $0xf0	// movl -0x10(%rbp), %eax	// MOVL -0x10(BP), AX
	WORD $0x4589; BYTE $0xd4	// movl %eax, -0x2c(%rbp)	// MOVL AX, -0x2c(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xc8458948	// movq %rax, -0x38(%rbp)	// MOVQ AX, -0x38(BP)
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0x4589; BYTE $0xc4	// movl %eax, -0x3c(%rbp)	// MOVL AX, -0x3c(BP)
	WORD $0x7d8b; BYTE $0xfc	// movl -4(%rbp), %edi	// MOVL -0x4(BP), DI
	WORD $0x758b; BYTE $0xf8	// movl -8(%rbp), %esi	// MOVL -0x8(BP), SI
	WORD $0x558b; BYTE $0xf4	// movl -0xc(%rbp), %edx	// MOVL -0xc(BP), DX
	LONG $0xd4558b44	// movl -0x2c(%rbp), %r10d	// MOVL -0x2c(BP), R10
	LONG $0xc8458b4c	// movq -0x38(%rbp), %r8	// MOVQ -0x38(BP), R8
	LONG $0xc44d8b44	// movl -0x3c(%rbp), %r9d	// MOVL -0x3c(BP), R9
	LONG $0x1aab8; BYTE $0x0	// movl $0x1aa, %eax	// MOVL $0x1aa, AX
	WORD $0x50f	// syscall	// SYSCALL 
	LONG $0xd8458948	// movq %rax, -0x28(%rbp)	// MOVQ AX, -0x28(BP)
	LONG $0xd8458b48	// movq -0x28(%rbp), %rax	// MOVQ -0x28(BP), AX
	LONG $0xb8458948	// movq %rax, -0x48(%rbp)	// MOVQ AX, -0x48(BP)
	LONG $0xb8458b48	// movq -0x48(%rbp), %rax	// MOVQ -0x48(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x441f0f66; WORD $0x0	// nopw (%rax, %rax)	// NOPW (AX)(AX*1)

__subr_io_uring_cq_advance__off_6944:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xf47d83	// cmpl $0, -0xc(%rbp)	// CMPL -0xc(BP), $0x0
	LONG $0x22840f; WORD $0x0	// je 0x1b57	// JE _lbl_1b57
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0x68c08348	// addq $0x68, %rax	// ADDQ $0x68, AX
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x8b48; BYTE $0x0	// movq (%rax), %rax	// MOVQ (AX), AX
	WORD $0x88b	// movl (%rax), %ecx	// MOVL (AX), CX
	WORD $0x558b; BYTE $0xf4	// movl -0xc(%rbp), %edx	// MOVL -0xc(BP), DX
	WORD $0xd101	// addl %edx, %ecx	// ADDL DX, CX
	WORD $0x4d89; BYTE $0xe4	// movl %ecx, -0x1c(%rbp)	// MOVL CX, -0x1c(BP)
	WORD $0x4d8b; BYTE $0xe4	// movl -0x1c(%rbp), %ecx	// MOVL -0x1c(BP), CX
	WORD $0x889	// movl %ecx, (%rax)	// MOVL CX, (AX)

_lbl_1b57:
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x801f0f; WORD $0x0; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_prep_timeout__off_7008:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x5589; BYTE $0xec	// movl %edx, -0x14(%rbp)	// MOVL DX, -0x14(BP)
	WORD $0x4d89; BYTE $0xe8	// movl %ecx, -0x18(%rbp)	// MOVL CX, -0x18(BP)
	LONG $0xf8758b48	// movq -8(%rbp), %rsi	// MOVQ -0x8(BP), SI
	LONG $0xf04d8b48	// movq -0x10(%rbp), %rcx	// MOVQ -0x10(BP), CX
	WORD $0x458b; BYTE $0xec	// movl -0x14(%rbp), %eax	// MOVL -0x14(BP), AX
	WORD $0x8941; BYTE $0xc1	// movl %eax, %r9d	// MOVL AX, R9
	LONG $0xbbf; BYTE $0x0	// movl $0xb, %edi	// MOVL $0xb, DI
	LONG $0xffffffba; BYTE $0xff	// movl $0xffffffff, %edx	// MOVL $0xffffffff, DX
	LONG $0x1b841; WORD $0x0	// movl $1, %r8d	// MOVL $0x1, R8
	LONG $0x17e8; BYTE $0x0	// callq 0x1bb0	// CALL ·__native_entry__+7088(SB)
	WORD $0x4d8b; BYTE $0xe8	// movl -0x18(%rbp), %ecx	// MOVL -0x18(BP), CX
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	WORD $0x4889; BYTE $0x1c	// movl %ecx, 0x1c(%rax)	// MOVL CX, 0x1c(AX)
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x801f0f; WORD $0x0; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_prep_rw__off_7088:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	WORD $0x7d89; BYTE $0xfc	// movl %edi, -4(%rbp)	// MOVL DI, -0x4(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x5589; BYTE $0xec	// movl %edx, -0x14(%rbp)	// MOVL DX, -0x14(BP)
	LONG $0xe04d8948	// movq %rcx, -0x20(%rbp)	// MOVQ CX, -0x20(BP)
	LONG $0xdc458944	// movl %r8d, -0x24(%rbp)	// MOVL R8, -0x24(BP)
	LONG $0xd04d894c	// movq %r9, -0x30(%rbp)	// MOVQ R9, -0x30(BP)
	WORD $0x458b; BYTE $0xfc	// movl -4(%rbp), %eax	// MOVL -0x4(BP), AX
	WORD $0xc188	// movb %al, %cl	// MOVB AX, CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x888	// movb %cl, (%rax)	// MOVB CX, (AX)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x140c6	// movb $0, 1(%rax)	// MOVB $0x0, 0x1(AX)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x240c766; WORD $0x0	// movw $0, 2(%rax)	// MOVW $0x0, 0x2(AX)
	WORD $0x4d8b; BYTE $0xec	// movl -0x14(%rbp), %ecx	// MOVL -0x14(BP), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x4889; BYTE $0x4	// movl %ecx, 4(%rax)	// MOVL CX, 0x4(AX)
	LONG $0xd04d8b48	// movq -0x30(%rbp), %rcx	// MOVQ -0x30(BP), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x8488948	// movq %rcx, 8(%rax)	// MOVQ CX, 0x8(AX)
	LONG $0xe04d8b48	// movq -0x20(%rbp), %rcx	// MOVQ -0x20(BP), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x10488948	// movq %rcx, 0x10(%rax)	// MOVQ CX, 0x10(AX)
	WORD $0x4d8b; BYTE $0xdc	// movl -0x24(%rbp), %ecx	// MOVL -0x24(BP), CX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x4889; BYTE $0x18	// movl %ecx, 0x18(%rax)	// MOVL CX, 0x18(AX)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x1c40c7; WORD $0x0; BYTE $0x0	// movl $0, 0x1c(%rax)	// MOVL $0x0, 0x1c(AX)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x2840c766; WORD $0x0	// movw $0, 0x28(%rax)	// MOVW $0x0, 0x28(AX)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x2a40c766; WORD $0x0	// movw $0, 0x2a(%rax)	// MOVW $0x0, 0x2a(AX)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0x2c40c7; WORD $0x0; BYTE $0x0	// movl $0, 0x2c(%rax)	// MOVL $0x0, 0x2c(AX)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	QUAD $0x3040c748	// movq $0, 0x30(%rax)	// MOVQ $0x0, 0x30(AX)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	QUAD $0x3840c748	// movq $0, 0x38(%rax)	// MOVQ $0x0, 0x38(AX)
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f66; BYTE $0x0	// nopw (%rax, %rax)	// NOPW (AX)(AX*1)

__subr___io_uring_submit__off_7264:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	WORD $0x5589; BYTE $0xf0	// movl %edx, -0x10(%rbp)	// MOVL DX, -0x10(BP)
	LONG $0xec45c7; WORD $0x0; BYTE $0x0	// movl $0, -0x14(%rbp)	// MOVL $0x0, -0x14(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xec758d48	// leaq -0x14(%rbp), %rsi	// LEAQ -0x14(BP), SI
	LONG $0xfffdbae8; BYTE $0xff	// callq 0x1a40	// CALL ·__native_entry__+6720(SB)
	WORD $0x1a8	// testb $1, %al	// TESTB $0x1, AX
	LONG $0xa850f; WORD $0x0	// jne 0x1c98	// JNE _lbl_1c98
	LONG $0xf07d83	// cmpl $0, -0x10(%rbp)	// CMPL -0x10(BP), $0x0
	LONG $0x6e840f; WORD $0x0	// je 0x1d06	// JE _lbl_1d06

_lbl_1c98:
	LONG $0xf07d83	// cmpl $0, -0x10(%rbp)	// CMPL -0x10(BP), $0x0
	LONG $0x16850f; WORD $0x0	// jne 0x1cb8	// JNE _lbl_1cb8
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc0808b; WORD $0x0	// movl 0xc0(%rax), %eax	// MOVL 0xc0(AX), AX
	WORD $0xe083; BYTE $0x1	// andl $1, %eax	// ANDL $0x1, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x9840f; WORD $0x0	// je 0x1cc1	// JE _lbl_1cc1

_lbl_1cb8:
	WORD $0x458b; BYTE $0xec	// movl -0x14(%rbp), %eax	// MOVL -0x14(BP), AX
	WORD $0xc883; BYTE $0x1	// orl $1, %eax	// ORL $0x1, AX
	WORD $0x4589; BYTE $0xec	// movl %eax, -0x14(%rbp)	// MOVL AX, -0x14(BP)

_lbl_1cc1:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xd080b60f; WORD $0x0; BYTE $0x0	// movzbl 0xd0(%rax), %eax	// 
	WORD $0xe083; BYTE $0x1	// andl $1, %eax	// ANDL $0x1, AX
	WORD $0xf883; BYTE $0x0	// cmpl $0, %eax	// CMPL AX, $0x0
	LONG $0x9840f; WORD $0x0	// je 0x1ce1	// JE _lbl_1ce1
	WORD $0x458b; BYTE $0xec	// movl -0x14(%rbp), %eax	// MOVL -0x14(BP), AX
	WORD $0xc883; BYTE $0x10	// orl $0x10, %eax	// ORL $0x10, AX
	WORD $0x4589; BYTE $0xec	// movl %eax, -0x14(%rbp)	// MOVL AX, -0x14(BP)

_lbl_1ce1:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xccb88b; WORD $0x0	// movl 0xcc(%rax), %edi	// MOVL 0xcc(AX), DI
	WORD $0x758b; BYTE $0xf4	// movl -0xc(%rbp), %esi	// MOVL -0xc(BP), SI
	WORD $0x558b; BYTE $0xf0	// movl -0x10(%rbp), %edx	// MOVL -0x10(BP), DX
	WORD $0x4d8b; BYTE $0xec	// movl -0x14(%rbp), %ecx	// MOVL -0x14(BP), CX
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x8941; BYTE $0xc0	// movl %eax, %r8d	// MOVL AX, R8
	LONG $0xfff592e8; BYTE $0xff	// callq 0x1290	// CALL ·__native_entry__+4752(SB)
	WORD $0x4589; BYTE $0xe8	// movl %eax, -0x18(%rbp)	// MOVL AX, -0x18(BP)
	LONG $0x6e9; BYTE $0x0	// jmp 0x1d0c	// JMP _lbl_1d0c

_lbl_1d06:
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0x4589; BYTE $0xe8	// movl %eax, -0x18(%rbp)	// MOVL AX, -0x18(BP)

_lbl_1d0c:
	WORD $0x458b; BYTE $0xe8	// movl -0x18(%rbp), %eax	// MOVL -0x18(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	BYTE $0x90	// nop	// NOP 

__subr_io_uring_register_buffers_update_tag__off_7456:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x50ec8348	// subq $0x50, %rsp	// SUBQ $0x50, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xe8558948	// movq %rdx, -0x18(%rbp)	// MOVQ DX, -0x18(BP)
	LONG $0xe04d8948	// movq %rcx, -0x20(%rbp)	// MOVQ CX, -0x20(BP)
	LONG $0xdc458944	// movl %r8d, -0x24(%rbp)	// MOVL R8, -0x24(BP)
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0x4589; BYTE $0xb8	// movl %eax, -0x48(%rbp)	// MOVL AX, -0x48(BP)
	LONG $0xbc45c7; WORD $0x0; BYTE $0x0	// movl $0, -0x44(%rbp)	// MOVL $0x0, -0x44(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xc0458948	// movq %rax, -0x40(%rbp)	// MOVQ AX, -0x40(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0xc8458948	// movq %rax, -0x38(%rbp)	// MOVQ AX, -0x38(BP)
	WORD $0x458b; BYTE $0xdc	// movl -0x24(%rbp), %eax	// MOVL -0x24(BP), AX
	WORD $0x4589; BYTE $0xd0	// movl %eax, -0x30(%rbp)	// MOVL AX, -0x30(BP)
	LONG $0xd445c7; WORD $0x0; BYTE $0x0	// movl $0, -0x2c(%rbp)	// MOVL $0x0, -0x2c(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xb8558d48	// leaq -0x48(%rbp), %rdx	// LEAQ -0x48(BP), DX
	LONG $0x10be; BYTE $0x0	// movl $0x10, %esi	// MOVL $0x10, SI
	LONG $0x20b9; BYTE $0x0	// movl $0x20, %ecx	// MOVL $0x20, CX
	LONG $0xee8; BYTE $0x0	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	LONG $0x50c48348	// addq $0x50, %rsp	// ADDQ $0x50, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_____sys_io_uring_register__off_7568:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	WORD $0x7d89; BYTE $0xfc	// movl %edi, -4(%rbp)	// MOVL DI, -0x4(BP)
	WORD $0x7589; BYTE $0xf8	// movl %esi, -8(%rbp)	// MOVL SI, -0x8(BP)
	LONG $0xf0558948	// movq %rdx, -0x10(%rbp)	// MOVQ DX, -0x10(BP)
	WORD $0x4d89; BYTE $0xec	// movl %ecx, -0x14(%rbp)	// MOVL CX, -0x14(BP)
	WORD $0x458b; BYTE $0xec	// movl -0x14(%rbp), %eax	// MOVL -0x14(BP), AX
	WORD $0x4589; BYTE $0xdc	// movl %eax, -0x24(%rbp)	// MOVL AX, -0x24(BP)
	WORD $0x7d8b; BYTE $0xfc	// movl -4(%rbp), %edi	// MOVL -0x4(BP), DI
	WORD $0x758b; BYTE $0xf8	// movl -8(%rbp), %esi	// MOVL -0x8(BP), SI
	LONG $0xf0558b48	// movq -0x10(%rbp), %rdx	// MOVQ -0x10(BP), DX
	LONG $0xdc558b44	// movl -0x24(%rbp), %r10d	// MOVL -0x24(BP), R10
	LONG $0x1abb8; BYTE $0x0	// movl $0x1ab, %eax	// MOVL $0x1ab, AX
	WORD $0x50f	// syscall	// SYSCALL 
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0xd0458948	// movq %rax, -0x30(%rbp)	// MOVQ AX, -0x30(BP)
	LONG $0xd0458b48	// movq -0x30(%rbp), %rax	// MOVQ -0x30(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x9066	// nop	// NOP 

__subr_io_uring_register_buffers_tags__off_7632:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x40ec8348	// subq $0x40, %rsp	// SUBQ $0x40, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	LONG $0xe8558948	// movq %rdx, -0x18(%rbp)	// MOVQ DX, -0x18(BP)
	WORD $0x4d89; BYTE $0xe4	// movl %ecx, -0x1c(%rbp)	// MOVL CX, -0x1c(BP)
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0x4589; BYTE $0xc0	// movl %eax, -0x40(%rbp)	// MOVL AX, -0x40(BP)
	LONG $0xc445c7; WORD $0x0; BYTE $0x0	// movl $0, -0x3c(%rbp)	// MOVL $0x0, -0x3c(BP)
	QUAD $0xc845c748	// movq $0, -0x38(%rbp)	// MOVQ $0x0, -0x38(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xd0458948	// movq %rax, -0x30(%rbp)	// MOVQ AX, -0x30(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xd8458948	// movq %rax, -0x28(%rbp)	// MOVQ AX, -0x28(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xc0558d48	// leaq -0x40(%rbp), %rdx	// LEAQ -0x40(BP), DX
	LONG $0xfbe; BYTE $0x0	// movl $0xf, %esi	// MOVL $0xf, SI
	LONG $0x20b9; BYTE $0x0	// movl $0x20, %ecx	// MOVL $0x20, CX
	LONG $0xffff67e8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	LONG $0x40c48348	// addq $0x40, %rsp	// ADDQ $0x40, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	BYTE $0x90	// nop	// NOP 

__subr_io_uring_register_buffers_sparse__off_7728:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x30ec8348	// subq $0x30, %rsp	// SUBQ $0x30, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xd07d8d48	// leaq -0x30(%rbp), %rdi	// LEAQ -0x30(BP), DI
	WORD $0xf631	// xorl %esi, %esi	// XORL SI, SI
	LONG $0x20ba; BYTE $0x0	// movl $0x20, %edx	// MOVL $0x20, DX
	LONG $0x9a1e8; BYTE $0x0	// callq 0x27f0	// CALL ·__native_entry__+10224(SB)
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0x4589; BYTE $0xd0	// movl %eax, -0x30(%rbp)	// MOVL AX, -0x30(BP)
	LONG $0x1d445c7; WORD $0x0; BYTE $0x0	// movl $1, -0x2c(%rbp)	// MOVL $0x1, -0x2c(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xd0558d48	// leaq -0x30(%rbp), %rdx	// LEAQ -0x30(BP), DX
	LONG $0xfbe; BYTE $0x0	// movl $0xf, %esi	// MOVL $0xf, SI
	LONG $0x20b9; BYTE $0x0	// movl $0x20, %ecx	// MOVL $0x20, CX
	LONG $0xffff17e8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	LONG $0x30c48348	// addq $0x30, %rsp	// ADDQ $0x30, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	BYTE $0x90	// nop	// NOP 

__subr_io_uring_register_buffers__off_7808:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x5589; BYTE $0xec	// movl %edx, -0x14(%rbp)	// MOVL DX, -0x14(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xf0558b48	// movq -0x10(%rbp), %rdx	// MOVQ -0x10(BP), DX
	WORD $0x4d8b; BYTE $0xec	// movl -0x14(%rbp), %ecx	// MOVL -0x14(BP), CX
	WORD $0xf631	// xorl %esi, %esi	// XORL SI, SI
	LONG $0xfffee5e8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	WORD $0x4589; BYTE $0xe8	// movl %eax, -0x18(%rbp)	// MOVL AX, -0x18(BP)
	LONG $0xe87d83	// cmpl $0, -0x18(%rbp)	// CMPL -0x18(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x1ec3	// JGE _lbl_1ec3
	WORD $0x458b; BYTE $0xe8	// movl -0x18(%rbp), %eax	// MOVL -0x18(BP), AX
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0xae9; BYTE $0x0	// jmp 0x1ecd	// JMP _lbl_1ecd

_lbl_1ec3:
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0xe9; BYTE $0x0	// jmp 0x1ecd	// JMP _lbl_1ecd

_lbl_1ecd:
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)

__subr_io_uring_unregister_buffers__off_7904:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0x1be; BYTE $0x0	// movl $1, %esi	// MOVL $0x1, SI
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0xc289	// movl %eax, %edx	// MOVL AX, DX
	WORD $0xc931	// xorl %ecx, %ecx	// XORL CX, CX
	LONG $0xfffe8ae8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	WORD $0x4589; BYTE $0xf4	// movl %eax, -0xc(%rbp)	// MOVL AX, -0xc(BP)
	LONG $0xf47d83	// cmpl $0, -0xc(%rbp)	// CMPL -0xc(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x1f1e	// JGE _lbl_1f1e
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0x4589; BYTE $0xf0	// movl %eax, -0x10(%rbp)	// MOVL AX, -0x10(BP)
	LONG $0xae9; BYTE $0x0	// jmp 0x1f28	// JMP _lbl_1f28

_lbl_1f1e:
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x4589; BYTE $0xf0	// movl %eax, -0x10(%rbp)	// MOVL AX, -0x10(BP)
	LONG $0xe9; BYTE $0x0	// jmp 0x1f28	// JMP _lbl_1f28

_lbl_1f28:
	WORD $0x458b; BYTE $0xf0	// movl -0x10(%rbp), %eax	// MOVL -0x10(BP), AX
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_io_uring_register_files_update_tag__off_8000:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x50ec8348	// subq $0x50, %rsp	// SUBQ $0x50, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xe8558948	// movq %rdx, -0x18(%rbp)	// MOVQ DX, -0x18(BP)
	LONG $0xe04d8948	// movq %rcx, -0x20(%rbp)	// MOVQ CX, -0x20(BP)
	LONG $0xdc458944	// movl %r8d, -0x24(%rbp)	// MOVL R8, -0x24(BP)
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0x4589; BYTE $0xb8	// movl %eax, -0x48(%rbp)	// MOVL AX, -0x48(BP)
	LONG $0xbc45c7; WORD $0x0; BYTE $0x0	// movl $0, -0x44(%rbp)	// MOVL $0x0, -0x44(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xc0458948	// movq %rax, -0x40(%rbp)	// MOVQ AX, -0x40(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0xc8458948	// movq %rax, -0x38(%rbp)	// MOVQ AX, -0x38(BP)
	WORD $0x458b; BYTE $0xdc	// movl -0x24(%rbp), %eax	// MOVL -0x24(BP), AX
	WORD $0x4589; BYTE $0xd0	// movl %eax, -0x30(%rbp)	// MOVL AX, -0x30(BP)
	LONG $0xd445c7; WORD $0x0; BYTE $0x0	// movl $0, -0x2c(%rbp)	// MOVL $0x0, -0x2c(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xb8558d48	// leaq -0x48(%rbp), %rdx	// LEAQ -0x48(BP), DX
	LONG $0xebe; BYTE $0x0	// movl $0xe, %esi	// MOVL $0xe, SI
	LONG $0x20b9; BYTE $0x0	// movl $0x20, %ecx	// MOVL $0x20, CX
	LONG $0xfffdeee8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	LONG $0x50c48348	// addq $0x50, %rsp	// ADDQ $0x50, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_io_uring_register_files_update__off_8112:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x30ec8348	// subq $0x30, %rsp	// SUBQ $0x30, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xe8558948	// movq %rdx, -0x18(%rbp)	// MOVQ DX, -0x18(BP)
	WORD $0x4d89; BYTE $0xe4	// movl %ecx, -0x1c(%rbp)	// MOVL CX, -0x1c(BP)
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0x4589; BYTE $0xd0	// movl %eax, -0x30(%rbp)	// MOVL AX, -0x30(BP)
	LONG $0xd445c7; WORD $0x0; BYTE $0x0	// movl $0, -0x2c(%rbp)	// MOVL $0x0, -0x2c(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xd8458948	// movq %rax, -0x28(%rbp)	// MOVQ AX, -0x28(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xd0558d48	// leaq -0x30(%rbp), %rdx	// LEAQ -0x30(BP), DX
	WORD $0x4d8b; BYTE $0xe4	// movl -0x1c(%rbp), %ecx	// MOVL -0x1c(BP), CX
	LONG $0x6be; BYTE $0x0	// movl $6, %esi	// MOVL $0x6, SI
	LONG $0xfffd9ae8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	LONG $0x30c48348	// addq $0x30, %rsp	// ADDQ $0x30, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x401f0f	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_register_files_sparse__off_8192:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x40ec8348	// subq $0x40, %rsp	// SUBQ $0x40, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xd07d8d48	// leaq -0x30(%rbp), %rdi	// LEAQ -0x30(BP), DI
	WORD $0xf631	// xorl %esi, %esi	// XORL SI, SI
	LONG $0x20ba; BYTE $0x0	// movl $0x20, %edx	// MOVL $0x20, DX
	LONG $0x7d1e8; BYTE $0x0	// callq 0x27f0	// CALL ·__native_entry__+10224(SB)
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0x4589; BYTE $0xd0	// movl %eax, -0x30(%rbp)	// MOVL AX, -0x30(BP)
	LONG $0x1d445c7; WORD $0x0; BYTE $0x0	// movl $1, -0x2c(%rbp)	// MOVL $0x1, -0x2c(BP)
	LONG $0xc845c7; WORD $0x0; BYTE $0x0	// movl $0, -0x38(%rbp)	// MOVL $0x0, -0x38(BP)

_lbl_2033:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xd0558d48	// leaq -0x30(%rbp), %rdx	// LEAQ -0x30(BP), DX
	LONG $0xdbe; BYTE $0x0	// movl $0xd, %esi	// MOVL $0xd, SI
	LONG $0x20b9; BYTE $0x0	// movl $0x20, %ecx	// MOVL $0x20, CX
	LONG $0xfffd40e8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	WORD $0x4589; BYTE $0xcc	// movl %eax, -0x34(%rbp)	// MOVL AX, -0x34(BP)
	LONG $0xcc7d83	// cmpl $0, -0x34(%rbp)	// CMPL -0x34(BP), $0x0
	LONG $0x58c0f; WORD $0x0	// jl 0x2062	// JL _lbl_2062
	LONG $0x3ce9; BYTE $0x0	// jmp 0x209e	// JMP _lbl_209e

_lbl_2062:
	LONG $0xe8cc7d83	// cmpl $-0x18, -0x34(%rbp)	// CMPL -0x34(BP), $-0x18
	LONG $0x1e850f; WORD $0x0	// jne 0x208a	// JNE _lbl_208a
	LONG $0xc87d83	// cmpl $0, -0x38(%rbp)	// CMPL -0x38(BP), $0x0
	LONG $0x14850f; WORD $0x0	// jne 0x208a	// JNE _lbl_208a
	LONG $0x1c845c7; WORD $0x0; BYTE $0x0	// movl $1, -0x38(%rbp)	// MOVL $0x1, -0x38(BP)
	WORD $0x7d8b; BYTE $0xf4	// movl -0xc(%rbp), %edi	// MOVL -0xc(BP), DI
	LONG $0x2be8; BYTE $0x0	// callq 0x20b0	// CALL ·__native_entry__+8368(SB)
	LONG $0x5e9; BYTE $0x0	// jmp 0x208f	// JMP _lbl_208f

_lbl_208a:
	LONG $0xfe9; BYTE $0x0	// jmp 0x209e	// JMP _lbl_209e

_lbl_208f:
	WORD $0x1b0	// movb $1, %al	// MOVB $0x1, AX
	WORD $0x1a8	// testb $1, %al	// TESTB $0x1, AX
	LONG $0xff9a850f; WORD $0xffff	// jne 0x2033	// JNE _lbl_2033
	LONG $0xe9; BYTE $0x0	// jmp 0x209e	// JMP _lbl_209e

_lbl_209e:
	WORD $0x458b; BYTE $0xcc	// movl -0x34(%rbp), %eax	// MOVL -0x34(BP), AX
	LONG $0x40c48348	// addq $0x40, %rsp	// ADDQ $0x40, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f66; BYTE $0x0	// nopw (%rax, %rax)	// NOPW (AX)(AX*1)

__subr_increase_rlimit_nofile__off_8368:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	WORD $0x7d89; BYTE $0xf8	// movl %edi, -8(%rbp)	// MOVL DI, -0x8(BP)
	LONG $0x7bf; BYTE $0x0	// movl $7, %edi	// MOVL $0x7, DI
	LONG $0xe0758d48	// leaq -0x20(%rbp), %rsi	// LEAQ -0x20(BP), SI
	LONG $0x6c7e8; BYTE $0x0	// callq 0x2790	// CALL ·__native_entry__+10128(SB)
	WORD $0x4589; BYTE $0xf4	// movl %eax, -0xc(%rbp)	// MOVL AX, -0xc(BP)
	LONG $0xf47d83	// cmpl $0, -0xc(%rbp)	// CMPL -0xc(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x20e1	// JGE _lbl_20e1
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0x4589; BYTE $0xfc	// movl %eax, -4(%rbp)	// MOVL AX, -0x4(BP)
	LONG $0x30e9; BYTE $0x0	// jmp 0x2111	// JMP _lbl_2111

_lbl_20e1:
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	WORD $0x4d8b; BYTE $0xf8	// movl -8(%rbp), %ecx	// MOVL -0x8(BP), CX
	WORD $0x3948; BYTE $0xc8	// cmpq %rcx, %rax	// CMPQ AX, CX
	LONG $0x19830f; WORD $0x0	// jae 0x210a	// JAE _lbl_210a
	WORD $0x458b; BYTE $0xf8	// movl -8(%rbp), %eax	// MOVL -0x8(BP), AX
	LONG $0xe0450348	// addq -0x20(%rbp), %rax	// ADDQ -0x20(BP), AX
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)
	LONG $0x7bf; BYTE $0x0	// movl $7, %edi	// MOVL $0x7, DI
	LONG $0xe0758d48	// leaq -0x20(%rbp), %rsi	// LEAQ -0x20(BP), SI
	LONG $0x6b6e8; BYTE $0x0	// callq 0x27c0	// CALL ·__native_entry__+10176(SB)

_lbl_210a:
	LONG $0xfc45c7; WORD $0x0; BYTE $0x0	// movl $0, -4(%rbp)	// MOVL $0x0, -0x4(BP)

_lbl_2111:
	WORD $0x458b; BYTE $0xfc	// movl -4(%rbp), %eax	// MOVL -0x4(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x441f0f66; WORD $0x0	// nopw (%rax, %rax)	// NOPW (AX)(AX*1)

__subr_io_uring_register_files_tags__off_8480:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x50ec8348	// subq $0x50, %rsp	// SUBQ $0x50, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	LONG $0xe8558948	// movq %rdx, -0x18(%rbp)	// MOVQ DX, -0x18(BP)
	WORD $0x4d89; BYTE $0xe4	// movl %ecx, -0x1c(%rbp)	// MOVL CX, -0x1c(BP)
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0x4589; BYTE $0xc0	// movl %eax, -0x40(%rbp)	// MOVL AX, -0x40(BP)
	LONG $0xc445c7; WORD $0x0; BYTE $0x0	// movl $0, -0x3c(%rbp)	// MOVL $0x0, -0x3c(BP)
	QUAD $0xc845c748	// movq $0, -0x38(%rbp)	// MOVQ $0x0, -0x38(BP)
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	LONG $0xd0458948	// movq %rax, -0x30(%rbp)	// MOVQ AX, -0x30(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xd8458948	// movq %rax, -0x28(%rbp)	// MOVQ AX, -0x28(BP)
	LONG $0xb845c7; WORD $0x0; BYTE $0x0	// movl $0, -0x48(%rbp)	// MOVL $0x0, -0x48(BP)

_lbl_2163:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xc0558d48	// leaq -0x40(%rbp), %rdx	// LEAQ -0x40(BP), DX
	LONG $0xdbe; BYTE $0x0	// movl $0xd, %esi	// MOVL $0xd, SI
	LONG $0x20b9; BYTE $0x0	// movl $0x20, %ecx	// MOVL $0x20, CX
	LONG $0xfffc10e8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	WORD $0x4589; BYTE $0xbc	// movl %eax, -0x44(%rbp)	// MOVL AX, -0x44(BP)
	LONG $0xbc7d83	// cmpl $0, -0x44(%rbp)	// CMPL -0x44(BP), $0x0
	LONG $0x58c0f; WORD $0x0	// jl 0x2192	// JL _lbl_2192
	LONG $0x3ce9; BYTE $0x0	// jmp 0x21ce	// JMP _lbl_21ce

_lbl_2192:
	LONG $0xe8bc7d83	// cmpl $-0x18, -0x44(%rbp)	// CMPL -0x44(BP), $-0x18
	LONG $0x1e850f; WORD $0x0	// jne 0x21ba	// JNE _lbl_21ba
	LONG $0xb87d83	// cmpl $0, -0x48(%rbp)	// CMPL -0x48(BP), $0x0
	LONG $0x14850f; WORD $0x0	// jne 0x21ba	// JNE _lbl_21ba
	LONG $0x1b845c7; WORD $0x0; BYTE $0x0	// movl $1, -0x48(%rbp)	// MOVL $0x1, -0x48(BP)
	WORD $0x7d8b; BYTE $0xe4	// movl -0x1c(%rbp), %edi	// MOVL -0x1c(BP), DI
	LONG $0xfffefbe8; BYTE $0xff	// callq 0x20b0	// CALL ·__native_entry__+8368(SB)
	LONG $0x5e9; BYTE $0x0	// jmp 0x21bf	// JMP _lbl_21bf

_lbl_21ba:
	LONG $0xfe9; BYTE $0x0	// jmp 0x21ce	// JMP _lbl_21ce

_lbl_21bf:
	WORD $0x1b0	// movb $1, %al	// MOVB $0x1, AX
	WORD $0x1a8	// testb $1, %al	// TESTB $0x1, AX
	LONG $0xff9a850f; WORD $0xffff	// jne 0x2163	// JNE _lbl_2163
	LONG $0xe9; BYTE $0x0	// jmp 0x21ce	// JMP _lbl_21ce

_lbl_21ce:
	WORD $0x458b; BYTE $0xbc	// movl -0x44(%rbp), %eax	// MOVL -0x44(BP), AX
	LONG $0x50c48348	// addq $0x50, %rsp	// ADDQ $0x50, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f66; BYTE $0x0	// nopw (%rax, %rax)	// NOPW (AX)(AX*1)

__subr_io_uring_register_files__off_8672:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x5589; BYTE $0xec	// movl %edx, -0x14(%rbp)	// MOVL DX, -0x14(BP)
	LONG $0xe445c7; WORD $0x0; BYTE $0x0	// movl $0, -0x1c(%rbp)	// MOVL $0x0, -0x1c(BP)

_lbl_21fa:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xf0558b48	// movq -0x10(%rbp), %rdx	// MOVQ -0x10(BP), DX
	WORD $0x4d8b; BYTE $0xec	// movl -0x14(%rbp), %ecx	// MOVL -0x14(BP), CX
	LONG $0x2be; BYTE $0x0	// movl $2, %esi	// MOVL $0x2, SI
	LONG $0xfffb7be8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	WORD $0x4589; BYTE $0xe8	// movl %eax, -0x18(%rbp)	// MOVL AX, -0x18(BP)
	LONG $0xe87d83	// cmpl $0, -0x18(%rbp)	// CMPL -0x18(BP), $0x0
	LONG $0x58c0f; WORD $0x0	// jl 0x2227	// JL _lbl_2227
	LONG $0x3ce9; BYTE $0x0	// jmp 0x2263	// JMP _lbl_2263

_lbl_2227:
	LONG $0xe8e87d83	// cmpl $-0x18, -0x18(%rbp)	// CMPL -0x18(BP), $-0x18
	LONG $0x1e850f; WORD $0x0	// jne 0x224f	// JNE _lbl_224f
	LONG $0xe47d83	// cmpl $0, -0x1c(%rbp)	// CMPL -0x1c(BP), $0x0
	LONG $0x14850f; WORD $0x0	// jne 0x224f	// JNE _lbl_224f
	LONG $0x1e445c7; WORD $0x0; BYTE $0x0	// movl $1, -0x1c(%rbp)	// MOVL $0x1, -0x1c(BP)
	WORD $0x7d8b; BYTE $0xec	// movl -0x14(%rbp), %edi	// MOVL -0x14(BP), DI
	LONG $0xfffe66e8; BYTE $0xff	// callq 0x20b0	// CALL ·__native_entry__+8368(SB)
	LONG $0x5e9; BYTE $0x0	// jmp 0x2254	// JMP _lbl_2254

_lbl_224f:
	LONG $0xfe9; BYTE $0x0	// jmp 0x2263	// JMP _lbl_2263

_lbl_2254:
	WORD $0x1b0	// movb $1, %al	// MOVB $0x1, AX
	WORD $0x1a8	// testb $1, %al	// TESTB $0x1, AX
	LONG $0xff9c850f; WORD $0xffff	// jne 0x21fa	// JNE _lbl_21fa
	LONG $0xe9; BYTE $0x0	// jmp 0x2263	// JMP _lbl_2263

_lbl_2263:
	WORD $0x458b; BYTE $0xe8	// movl -0x18(%rbp), %eax	// MOVL -0x18(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x401f0f	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_unregister_files__off_8816:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0x3be; BYTE $0x0	// movl $3, %esi	// MOVL $0x3, SI
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0xc289	// movl %eax, %edx	// MOVL AX, DX
	WORD $0xc931	// xorl %ecx, %ecx	// XORL CX, CX
	LONG $0xfffafae8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	WORD $0x4589; BYTE $0xf4	// movl %eax, -0xc(%rbp)	// MOVL AX, -0xc(BP)
	LONG $0xf47d83	// cmpl $0, -0xc(%rbp)	// CMPL -0xc(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x22ae	// JGE _lbl_22ae
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0x4589; BYTE $0xf0	// movl %eax, -0x10(%rbp)	// MOVL AX, -0x10(BP)
	LONG $0xae9; BYTE $0x0	// jmp 0x22b8	// JMP _lbl_22b8

_lbl_22ae:
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x4589; BYTE $0xf0	// movl %eax, -0x10(%rbp)	// MOVL AX, -0x10(BP)
	LONG $0xe9; BYTE $0x0	// jmp 0x22b8	// JMP _lbl_22b8

_lbl_22b8:
	WORD $0x458b; BYTE $0xf0	// movl -0x10(%rbp), %eax	// MOVL -0x10(BP), AX
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_io_uring_register_eventfd__off_8912:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xf4558d48	// leaq -0xc(%rbp), %rdx	// LEAQ -0xc(BP), DX
	LONG $0x4be; BYTE $0x0	// movl $4, %esi	// MOVL $0x4, SI
	LONG $0x1b9; BYTE $0x0	// movl $1, %ecx	// MOVL $0x1, CX
	LONG $0xfffa94e8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	WORD $0x4589; BYTE $0xf0	// movl %eax, -0x10(%rbp)	// MOVL AX, -0x10(BP)
	LONG $0xf07d83	// cmpl $0, -0x10(%rbp)	// CMPL -0x10(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x2314	// JGE _lbl_2314
	WORD $0x458b; BYTE $0xf0	// movl -0x10(%rbp), %eax	// MOVL -0x10(BP), AX
	WORD $0x4589; BYTE $0xec	// movl %eax, -0x14(%rbp)	// MOVL AX, -0x14(BP)
	LONG $0xae9; BYTE $0x0	// jmp 0x231e	// JMP _lbl_231e

_lbl_2314:
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x4589; BYTE $0xec	// movl %eax, -0x14(%rbp)	// MOVL AX, -0x14(BP)
	LONG $0xe9; BYTE $0x0	// jmp 0x231e	// JMP _lbl_231e

_lbl_231e:
	WORD $0x458b; BYTE $0xec	// movl -0x14(%rbp), %eax	// MOVL -0x14(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f66; BYTE $0x0	// nopw (%rax, %rax)	// NOPW (AX)(AX*1)

__subr_io_uring_unregister_eventfd__off_9008:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0x5be; BYTE $0x0	// movl $5, %esi	// MOVL $0x5, SI
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0xc289	// movl %eax, %edx	// MOVL AX, DX
	WORD $0xc931	// xorl %ecx, %ecx	// XORL CX, CX
	LONG $0xfffa3ae8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	WORD $0x4589; BYTE $0xf4	// movl %eax, -0xc(%rbp)	// MOVL AX, -0xc(BP)
	LONG $0xf47d83	// cmpl $0, -0xc(%rbp)	// CMPL -0xc(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x236e	// JGE _lbl_236e
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0x4589; BYTE $0xf0	// movl %eax, -0x10(%rbp)	// MOVL AX, -0x10(BP)
	LONG $0xae9; BYTE $0x0	// jmp 0x2378	// JMP _lbl_2378

_lbl_236e:
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x4589; BYTE $0xf0	// movl %eax, -0x10(%rbp)	// MOVL AX, -0x10(BP)
	LONG $0xe9; BYTE $0x0	// jmp 0x2378	// JMP _lbl_2378

_lbl_2378:
	WORD $0x458b; BYTE $0xf0	// movl -0x10(%rbp), %eax	// MOVL -0x10(BP), AX
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_io_uring_register_eventfd_async__off_9104:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xf4558d48	// leaq -0xc(%rbp), %rdx	// LEAQ -0xc(BP), DX
	LONG $0x7be; BYTE $0x0	// movl $7, %esi	// MOVL $0x7, SI
	LONG $0x1b9; BYTE $0x0	// movl $1, %ecx	// MOVL $0x1, CX
	LONG $0xfff9d4e8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	WORD $0x4589; BYTE $0xf0	// movl %eax, -0x10(%rbp)	// MOVL AX, -0x10(BP)
	LONG $0xf07d83	// cmpl $0, -0x10(%rbp)	// CMPL -0x10(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x23d4	// JGE _lbl_23d4
	WORD $0x458b; BYTE $0xf0	// movl -0x10(%rbp), %eax	// MOVL -0x10(BP), AX
	WORD $0x4589; BYTE $0xec	// movl %eax, -0x14(%rbp)	// MOVL AX, -0x14(BP)
	LONG $0xae9; BYTE $0x0	// jmp 0x23de	// JMP _lbl_23de

_lbl_23d4:
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x4589; BYTE $0xec	// movl %eax, -0x14(%rbp)	// MOVL AX, -0x14(BP)
	LONG $0xe9; BYTE $0x0	// jmp 0x23de	// JMP _lbl_23de

_lbl_23de:
	WORD $0x458b; BYTE $0xec	// movl -0x14(%rbp), %eax	// MOVL -0x14(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f66; BYTE $0x0	// nopw (%rax, %rax)	// NOPW (AX)(AX*1)

__subr_io_uring_register_probe__off_9200:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x5589; BYTE $0xec	// movl %edx, -0x14(%rbp)	// MOVL DX, -0x14(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xf0558b48	// movq -0x10(%rbp), %rdx	// MOVQ -0x10(BP), DX
	WORD $0x4d8b; BYTE $0xec	// movl -0x14(%rbp), %ecx	// MOVL -0x14(BP), CX
	LONG $0x8be; BYTE $0x0	// movl $8, %esi	// MOVL $0x8, SI
	LONG $0xfff972e8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	WORD $0x4589; BYTE $0xe8	// movl %eax, -0x18(%rbp)	// MOVL AX, -0x18(BP)
	LONG $0xe87d83	// cmpl $0, -0x18(%rbp)	// CMPL -0x18(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x2436	// JGE _lbl_2436
	WORD $0x458b; BYTE $0xe8	// movl -0x18(%rbp), %eax	// MOVL -0x18(BP), AX
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0xae9; BYTE $0x0	// jmp 0x2440	// JMP _lbl_2440

_lbl_2436:
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0xe9; BYTE $0x0	// jmp 0x2440	// JMP _lbl_2440

_lbl_2440:
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x801f0f; WORD $0x0; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_register_personality__off_9296:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0x9be; BYTE $0x0	// movl $9, %esi	// MOVL $0x9, SI
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0xc289	// movl %eax, %edx	// MOVL AX, DX
	WORD $0xc931	// xorl %ecx, %ecx	// XORL CX, CX
	LONG $0xfff91ae8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x401f0f	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_unregister_personality__off_9344:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	WORD $0x4d8b; BYTE $0xf4	// movl -0xc(%rbp), %ecx	// MOVL -0xc(BP), CX
	LONG $0xabe; BYTE $0x0	// movl $0xa, %esi	// MOVL $0xa, SI
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0xc289	// movl %eax, %edx	// MOVL AX, DX
	LONG $0xfff8e6e8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 

__subr_io_uring_register_restrictions__off_9392:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x5589; BYTE $0xec	// movl %edx, -0x14(%rbp)	// MOVL DX, -0x14(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xf0558b48	// movq -0x10(%rbp), %rdx	// MOVQ -0x10(BP), DX
	WORD $0x4d8b; BYTE $0xec	// movl -0x14(%rbp), %ecx	// MOVL -0x14(BP), CX
	LONG $0xbbe; BYTE $0x0	// movl $0xb, %esi	// MOVL $0xb, SI
	LONG $0xfff8b2e8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	WORD $0x4589; BYTE $0xe8	// movl %eax, -0x18(%rbp)	// MOVL AX, -0x18(BP)
	LONG $0xe87d83	// cmpl $0, -0x18(%rbp)	// CMPL -0x18(BP), $0x0
	LONG $0xb8d0f; WORD $0x0	// jge 0x24f6	// JGE _lbl_24f6
	WORD $0x458b; BYTE $0xe8	// movl -0x18(%rbp), %eax	// MOVL -0x18(BP), AX
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0xae9; BYTE $0x0	// jmp 0x2500	// JMP _lbl_2500

_lbl_24f6:
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0xe9; BYTE $0x0	// jmp 0x2500	// JMP _lbl_2500

_lbl_2500:
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x801f0f; WORD $0x0; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_enable_rings__off_9488:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xcbe; BYTE $0x0	// movl $0xc, %esi	// MOVL $0xc, SI
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0xc289	// movl %eax, %edx	// MOVL AX, DX
	WORD $0xc931	// xorl %ecx, %ecx	// XORL CX, CX
	LONG $0xfff85ae8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x401f0f	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_register_iowq_aff__off_9536:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	LONG $0xe8558948	// movq %rdx, -0x18(%rbp)	// MOVQ DX, -0x18(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xe8558b48	// movq -0x18(%rbp), %rdx	// MOVQ -0x18(BP), DX
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0xc189	// movl %eax, %ecx	// MOVL AX, CX
	LONG $0x11be; BYTE $0x0	// movl $0x11, %esi	// MOVL $0x11, SI
	LONG $0xfff81ee8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_io_uring_unregister_iowq_aff__off_9600:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0x12be; BYTE $0x0	// movl $0x12, %esi	// MOVL $0x12, SI
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0xc289	// movl %eax, %edx	// MOVL AX, DX
	WORD $0xc931	// xorl %ecx, %ecx	// XORL CX, CX
	LONG $0xfff7eae8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x401f0f	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_register_iowq_max_workers__off_9648:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x10ec8348	// subq $0x10, %rsp	// SUBQ $0x10, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xf0558b48	// movq -0x10(%rbp), %rdx	// MOVQ -0x10(BP), DX
	LONG $0x13be; BYTE $0x0	// movl $0x13, %esi	// MOVL $0x13, SI
	LONG $0x2b9; BYTE $0x0	// movl $2, %ecx	// MOVL $0x2, CX
	LONG $0xfff7b3e8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	LONG $0x10c48348	// addq $0x10, %rsp	// ADDQ $0x10, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_register_ring_fd__off_9712:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xffe845c7; WORD $0xffff; BYTE $0xff	// movl $0xffffffff, -0x18(%rbp)	// MOVL $0xffffffff, -0x18(BP)
	LONG $0xec45c7; WORD $0x0; BYTE $0x0	// movl $0, -0x14(%rbp)	// MOVL $0x0, -0x14(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4806348; WORD $0x0; BYTE $0x0	// movslq 0xc4(%rax), %rax	// 
	LONG $0xf0458948	// movq %rax, -0x10(%rbp)	// MOVQ AX, -0x10(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xe8558d48	// leaq -0x18(%rbp), %rdx	// LEAQ -0x18(BP), DX
	LONG $0x14be; BYTE $0x0	// movl $0x14, %esi	// MOVL $0x14, SI
	LONG $0x1b9; BYTE $0x0	// movl $1, %ecx	// MOVL $0x1, CX
	LONG $0xfff75ae8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0x1e47d83	// cmpl $1, -0x1c(%rbp)	// CMPL -0x1c(BP), $0x1
	LONG $0x21850f; WORD $0x0	// jne 0x2664	// JNE _lbl_2664
	WORD $0x4d8b; BYTE $0xe8	// movl -0x18(%rbp), %ecx	// MOVL -0x18(BP), CX
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xcc8889; WORD $0x0	// movl %ecx, 0xcc(%rax)	// MOVL CX, 0xcc(AX)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xd088b60f; WORD $0x0; BYTE $0x0	// movzbl 0xd0(%rax), %ecx	// 
	WORD $0xc983; BYTE $0x1	// orl $1, %ecx	// ORL $0x1, CX
	LONG $0xd08888; WORD $0x0	// movb %cl, 0xd0(%rax)	// MOVB CX, 0xd0(AX)

_lbl_2664:
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_unregister_ring_fd__off_9840:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xcc808b; WORD $0x0	// movl 0xcc(%rax), %eax	// MOVL 0xcc(AX), AX
	WORD $0x4589; BYTE $0xe8	// movl %eax, -0x18(%rbp)	// MOVL AX, -0x18(BP)
	LONG $0xec45c7; WORD $0x0; BYTE $0x0	// movl $0, -0x14(%rbp)	// MOVL $0x0, -0x14(BP)
	QUAD $0xf045c748	// movq $0, -0x10(%rbp)	// MOVQ $0x0, -0x10(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xe8558d48	// leaq -0x18(%rbp), %rdx	// LEAQ -0x18(BP), DX
	LONG $0x15be; BYTE $0x0	// movl $0x15, %esi	// MOVL $0x15, SI
	LONG $0x1b9; BYTE $0x0	// movl $1, %ecx	// MOVL $0x1, CX
	LONG $0xfff6dbe8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	WORD $0x4589; BYTE $0xe4	// movl %eax, -0x1c(%rbp)	// MOVL AX, -0x1c(BP)
	LONG $0x1e47d83	// cmpl $1, -0x1c(%rbp)	// CMPL -0x1c(BP), $0x1
	LONG $0x28850f; WORD $0x0	// jne 0x26ea	// JNE _lbl_26ea
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4888b; WORD $0x0	// movl 0xc4(%rax), %ecx	// MOVL 0xc4(AX), CX
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xcc8889; WORD $0x0	// movl %ecx, 0xcc(%rax)	// MOVL CX, 0xcc(AX)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xd088b60f; WORD $0x0; BYTE $0x0	// movzbl 0xd0(%rax), %ecx	// 
	WORD $0xe183; BYTE $0xfe	// andl $0xfffffffe, %ecx	// ANDL $0xfffffffe, CX
	LONG $0xd08888; WORD $0x0	// movb %cl, 0xd0(%rax)	// MOVB CX, 0xd0(AX)

_lbl_26ea:
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_io_uring_register_buf_ring__off_9984:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x5589; BYTE $0xec	// movl %edx, -0x14(%rbp)	// MOVL DX, -0x14(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xf0558b48	// movq -0x10(%rbp), %rdx	// MOVQ -0x10(BP), DX
	LONG $0x16be; BYTE $0x0	// movl $0x16, %esi	// MOVL $0x16, SI
	LONG $0x1b9; BYTE $0x0	// movl $1, %ecx	// MOVL $0x1, CX
	LONG $0xfff660e8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)

__subr_io_uring_unregister_buf_ring__off_10048:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x40ec8348	// subq $0x40, %rsp	// SUBQ $0x40, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xc87d8d48	// leaq -0x38(%rbp), %rdi	// LEAQ -0x38(BP), DI
	WORD $0xf631	// xorl %esi, %esi	// XORL SI, SI
	LONG $0x28ba; BYTE $0x0	// movl $0x28, %edx	// MOVL $0x28, DX
	LONG $0x91e8; BYTE $0x0	// callq 0x27f0	// CALL ·__native_entry__+10224(SB)
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	LONG $0xd4458966	// movw %ax, -0x2c(%rbp)	// MOVW AX, -0x2c(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xc4b88b; WORD $0x0	// movl 0xc4(%rax), %edi	// MOVL 0xc4(AX), DI
	LONG $0xc8558d48	// leaq -0x38(%rbp), %rdx	// LEAQ -0x38(BP), DX
	LONG $0x17be; BYTE $0x0	// movl $0x17, %esi	// MOVL $0x17, SI
	LONG $0x1b9; BYTE $0x0	// movl $1, %ecx	// MOVL $0x1, CX
	LONG $0xfff60de8; BYTE $0xff	// callq 0x1d90	// CALL ·__native_entry__+7568(SB)
	LONG $0x40c48348	// addq $0x40, %rsp	// ADDQ $0x40, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x801f0f; WORD $0x0; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr___sys_getrlimit__off_10128:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	WORD $0x7d89; BYTE $0xfc	// movl %edi, -4(%rbp)	// MOVL DI, -0x4(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x7d8b; BYTE $0xfc	// movl -4(%rbp), %edi	// MOVL -0x4(BP), DI
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	LONG $0x61b8; BYTE $0x0	// movl $0x61, %eax	// MOVL $0x61, AX
	WORD $0x50f	// syscall	// SYSCALL 
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr___sys_setrlimit__off_10176:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	WORD $0x7d89; BYTE $0xfc	// movl %edi, -4(%rbp)	// MOVL DI, -0x4(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x7d8b; BYTE $0xfc	// movl -4(%rbp), %edi	// MOVL -0x4(BP), DI
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	LONG $0xa0b8; BYTE $0x0	// movl $0xa0, %eax	// MOVL $0xa0, AX
	WORD $0x50f	// syscall	// SYSCALL 
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_memset__off_10224:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	WORD $0x7589; BYTE $0xf4	// movl %esi, -0xc(%rbp)	// MOVL SI, -0xc(BP)
	LONG $0xe8558948	// movq %rdx, -0x18(%rbp)	// MOVQ DX, -0x18(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xd8458948	// movq %rax, -0x28(%rbp)	// MOVQ AX, -0x28(BP)
	QUAD $0xe045c748	// movq $0, -0x20(%rbp)	// MOVQ $0x0, -0x20(BP)

_lbl_280f:
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0xe8453b48	// cmpq -0x18(%rbp), %rax	// CMPQ AX, -0x18(BP)
	LONG $0x21830f; WORD $0x0	// jae 0x283e	// JAE _lbl_283e
	WORD $0x458b; BYTE $0xf4	// movl -0xc(%rbp), %eax	// MOVL -0xc(BP), AX
	WORD $0xc288	// movb %al, %dl	// MOVB AX, DX
	LONG $0xd8458b48	// movq -0x28(%rbp), %rax	// MOVQ -0x28(BP), AX
	LONG $0xe04d8b48	// movq -0x20(%rbp), %rcx	// MOVQ -0x20(BP), CX
	WORD $0x1488; BYTE $0x8	// movb %dl, (%rax, %rcx)	// MOVB DX, (AX)(CX*1)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0x1c08348	// addq $1, %rax	// ADDQ $0x1, AX
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)
	LONG $0xffffd1e9; BYTE $0xff	// jmp 0x280f	// JMP _lbl_280f

_lbl_283e:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x9066	// nop	// NOP 

__subr___uring_malloc__off_10320:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf07d8948	// movq %rdi, -0x10(%rbp)	// MOVQ DI, -0x10(BP)
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	LONG $0x10c68348	// addq $0x10, %rsi	// ADDQ $0x10, SI
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	WORD $0x8941; BYTE $0xc1	// movl %eax, %r9d	// MOVL AX, R9
	LONG $0x3ba; BYTE $0x0	// movl $3, %edx	// MOVL $0x3, DX
	LONG $0x22b9; BYTE $0x0	// movl $0x22, %ecx	// MOVL $0x22, CX
	LONG $0xffffb841; WORD $0xffff	// movl $0xffffffff, %r8d	// MOVL $0xffffffff, R8
	WORD $0x894c; BYTE $0xcf	// movq %r9, %rdi	// MOVQ R9, DI
	LONG $0x4fe8; BYTE $0x0	// callq 0x28d0	// CALL ·__native_entry__+10448(SB)
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xe87d8b48	// movq -0x18(%rbp), %rdi	// MOVQ -0x18(BP), DI
	LONG $0xb2e8; BYTE $0x0	// callq 0x2940	// CALL ·__native_entry__+10560(SB)
	WORD $0x1a8	// testb $1, %al	// TESTB $0x1, AX
	LONG $0x5850f; WORD $0x0	// jne 0x289b	// JNE _lbl_289b
	LONG $0xde9; BYTE $0x0	// jmp 0x28a8	// JMP _lbl_28a8

_lbl_289b:
	QUAD $0xf845c748	// movq $0, -8(%rbp)	// MOVQ $0x0, -0x8(BP)
	LONG $0x1be9; BYTE $0x0	// jmp 0x28c3	// JMP _lbl_28c3

_lbl_28a8:
	LONG $0xf04d8b48	// movq -0x10(%rbp), %rcx	// MOVQ -0x10(BP), CX
	LONG $0x10c18348	// addq $0x10, %rcx	// ADDQ $0x10, CX
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	WORD $0x8948; BYTE $0x8	// movq %rcx, (%rax)	// MOVQ CX, (AX)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0x10c08348	// addq $0x10, %rax	// ADDQ $0x10, AX
	LONG $0xf8458948	// movq %rax, -8(%rbp)	// MOVQ AX, -0x8(BP)

_lbl_28c3:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr___sys_mmap__off_10448:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	WORD $0x5589; BYTE $0xec	// movl %edx, -0x14(%rbp)	// MOVL DX, -0x14(BP)
	WORD $0x4d89; BYTE $0xe8	// movl %ecx, -0x18(%rbp)	// MOVL CX, -0x18(BP)
	LONG $0xe4458944	// movl %r8d, -0x1c(%rbp)	// MOVL R8, -0x1c(BP)
	LONG $0xd84d894c	// movq %r9, -0x28(%rbp)	// MOVQ R9, -0x28(BP)
	LONG $0x9d445c7; WORD $0x0; BYTE $0x0	// movl $9, -0x2c(%rbp)	// MOVL $0x9, -0x2c(BP)
	WORD $0x458b; BYTE $0xe8	// movl -0x18(%rbp), %eax	// MOVL -0x18(BP), AX
	WORD $0x4589; BYTE $0xc4	// movl %eax, -0x3c(%rbp)	// MOVL AX, -0x3c(BP)
	WORD $0x458b; BYTE $0xe4	// movl -0x1c(%rbp), %eax	// MOVL -0x1c(BP), AX
	WORD $0x4589; BYTE $0xc0	// movl %eax, -0x40(%rbp)	// MOVL AX, -0x40(BP)
	LONG $0xd8458b48	// movq -0x28(%rbp), %rax	// MOVQ -0x28(BP), AX
	LONG $0xb8458948	// movq %rax, -0x48(%rbp)	// MOVQ AX, -0x48(BP)
	WORD $0x458b; BYTE $0xd4	// movl -0x2c(%rbp), %eax	// MOVL -0x2c(BP), AX
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	WORD $0x558b; BYTE $0xec	// movl -0x14(%rbp), %edx	// MOVL -0x14(BP), DX
	LONG $0xc4558b44	// movl -0x3c(%rbp), %r10d	// MOVL -0x3c(BP), R10
	LONG $0xc0458b44	// movl -0x40(%rbp), %r8d	// MOVL -0x40(BP), R8
	LONG $0xb84d8b4c	// movq -0x48(%rbp), %r9	// MOVQ -0x48(BP), R9
	WORD $0x50f	// syscall	// SYSCALL 
	LONG $0xc8458948	// movq %rax, -0x38(%rbp)	// MOVQ AX, -0x38(BP)
	LONG $0xc8458b48	// movq -0x38(%rbp), %rax	// MOVQ -0x38(BP), AX
	LONG $0xb0458948	// movq %rax, -0x50(%rbp)	// MOVQ AX, -0x50(BP)
	LONG $0xb0458b48	// movq -0x50(%rbp), %rax	// MOVQ -0x50(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_IS_ERR__off_10560:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xf0013d48; WORD $0xffff	// cmpq $-0xfff, %rax	// CMPQ AX, $-0xfff
	WORD $0x930f; BYTE $0xc0	// setae %al	// 
	WORD $0xff34	// xorb $0xff, %al	// XORB $0xff, AX
	WORD $0xff34	// xorb $0xff, %al	// XORB $0xff, AX
	WORD $0x124	// andb $1, %al	// ANDB $0x1, AX
	WORD $0xb60f; BYTE $0xc0	// movzbl %al, %eax	// 
	WORD $0x9848	// cltq	// 
	LONG $0xf88348	// cmpq $0, %rax	// CMPQ AX, $0x0
	WORD $0x950f; BYTE $0xc0	// setne %al	// SETNE AX
	WORD $0x124	// andb $1, %al	// ANDB $0x1, AX
	WORD $0xb60f; BYTE $0xc0	// movzbl %al, %eax	// 
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x9066	// nop	// NOP 

__subr___uring_free__off_10608:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x20ec8348	// subq $0x20, %rsp	// SUBQ $0x20, SP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf87d8348; BYTE $0x0	// cmpq $0, -8(%rbp)	// CMPQ -0x8(BP), $0x0
	WORD $0x950f; BYTE $0xc0	// setne %al	// SETNE AX
	WORD $0xff34	// xorb $0xff, %al	// XORB $0xff, AX
	WORD $0xff34	// xorb $0xff, %al	// XORB $0xff, AX
	WORD $0xff34	// xorb $0xff, %al	// XORB $0xff, AX
	WORD $0x124	// andb $1, %al	// ANDB $0x1, AX
	WORD $0xb60f; BYTE $0xc0	// movzbl %al, %eax	// 
	WORD $0x9848	// cltq	// 
	LONG $0xf88348	// cmpq $0, %rax	// CMPQ AX, $0x0
	LONG $0x5840f; WORD $0x0	// je 0x29a0	// JE _lbl_29a0
	LONG $0x2ce9; BYTE $0x0	// jmp 0x29cc	// JMP _lbl_29cc

_lbl_29a0:
	LONG $0xf8458b48	// movq -8(%rbp), %rax	// MOVQ -0x8(BP), AX
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xf0c08348	// addq $-0x10, %rax	// ADDQ $-0x10, AX
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	LONG $0xf0458948	// movq %rax, -0x10(%rbp)	// MOVQ AX, -0x10(BP)
	LONG $0xf07d8b48	// movq -0x10(%rbp), %rdi	// MOVQ -0x10(BP), DI
	LONG $0xf0458b48	// movq -0x10(%rbp), %rax	// MOVQ -0x10(BP), AX
	WORD $0x8b48; BYTE $0x30	// movq (%rax), %rsi	// MOVQ (AX), SI
	LONG $0x14e8; BYTE $0x0	// callq 0x29e0	// CALL ·__native_entry__+10720(SB)

_lbl_29cc:
	LONG $0x20c48348	// addq $0x20, %rsp	// ADDQ $0x20, SP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	LONG $0x401f0f	// nopl (%rax)	// NOPL (AX)

__subr___sys_munmap__off_10720:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xf87d8948	// movq %rdi, -8(%rbp)	// MOVQ DI, -0x8(BP)
	LONG $0xf0758948	// movq %rsi, -0x10(%rbp)	// MOVQ SI, -0x10(BP)
	LONG $0xf87d8b48	// movq -8(%rbp), %rdi	// MOVQ -0x8(BP), DI
	LONG $0xf0758b48	// movq -0x10(%rbp), %rsi	// MOVQ -0x10(BP), SI
	LONG $0xbb8; BYTE $0x0	// movl $0xb, %eax	// MOVL $0xb, AX
	WORD $0x50f	// syscall	// SYSCALL 
	LONG $0xe8458948	// movq %rax, -0x18(%rbp)	// MOVQ AX, -0x18(BP)
	LONG $0xe8458b48	// movq -0x18(%rbp), %rax	// MOVQ -0x18(BP), AX
	LONG $0xe0458948	// movq %rax, -0x20(%rbp)	// MOVQ AX, -0x20(BP)
	LONG $0xe0458b48	// movq -0x20(%rbp), %rax	// MOVQ -0x20(BP), AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_IoUringQueueInit__off_10768:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xffdd07e8; BYTE $0xff	// callq 0x720	// CALL ·__native_entry__+1824(SB)
	WORD $0x9848	// cltq	// 
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_IoUringQueueInitParams__off_10784:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xffdc07e8; BYTE $0xff	// callq 0x630	// CALL ·__native_entry__+1584(SB)
	WORD $0x9848	// cltq	// 
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_IoUringQueueExit__off_10800:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	BYTE $0x5d	// popq %rbp	// POPQ BP
	LONG $0xffdd36e9; BYTE $0xff	// jmp 0x770	// JMP ·__native_entry__+1904(SB)
	LONG $0x441f0f66; WORD $0x0	// nopw (%rax, %rax)	// NOPW (AX)(AX*1)

__subr_IoUringSubmit__off_10816:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xffec77e8; BYTE $0xff	// callq 0x16c0	// CALL ·__native_entry__+5824(SB)
	WORD $0x9848	// cltq	// 
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_IoUringSubmitAndWait__off_10832:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0xffecc7e8; BYTE $0xff	// callq 0x1720	// CALL ·__native_entry__+5920(SB)
	WORD $0x9848	// cltq	// 
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	WORD $0x1f0f; BYTE $0x0	// nopl (%rax)	// NOPL (AX)

__subr_IoUringWaitCQE__off_10848:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	LONG $0x78478b48	// movq 0x78(%rdi), %rax	// MOVQ 0x78(DI), AX
	WORD $0x8b44; BYTE $0x0	// movl (%rax), %r8d	// MOVL (AX), R8
	LONG $0xc08f8b; WORD $0x0	// movl 0xc0(%rdi), %ecx	// MOVL 0xc0(DI), CX
	WORD $0xe9c1; BYTE $0xb	// shrl $0xb, %ecx	// SHRL $0xb, CX
	WORD $0xe183; BYTE $0x1	// andl $1, %ecx	// ANDL $0x1, CX
	QUAD $0x841f0f66; BYTE $0x0	// nopw (%rax, %rax)	// NOPW (AX)(AX*1)

_lbl_2a80:
	LONG $0x70478b48	// movq 0x70(%rdi), %rax	// MOVQ 0x70(DI), AX
	WORD $0x108b	// movl (%rax), %edx	// MOVL (AX), DX
	LONG $0x684f8b4c	// movq 0x68(%rdi), %r9	// MOVQ 0x68(DI), R9
	WORD $0x8b41; BYTE $0x1	// movl (%r9), %eax	// MOVL (R9), AX
	WORD $0xc239	// cmpl %eax, %edx	// CMPL DX, AX
	WORD $0x3374	// je 0x2ac4	// JE _lbl_2ac4
	LONG $0x98978b4c; WORD $0x0; BYTE $0x0	// movq 0x98(%rdi), %r10	// MOVQ 0x98(DI), R10
	WORD $0xc289	// movl %eax, %edx	// MOVL AX, DX
	WORD $0x2144; BYTE $0xc2	// andl %r8d, %edx	// ANDL R8, DX
	WORD $0xe2d3	// shll %cl, %edx	// SHLL CX, DX
	LONG $0x4e2c148	// shlq $4, %rdx	// SHLQ $0x4, DX
	LONG $0x121c8d4d	// leaq (%r10, %rdx), %r11	// LEAQ (R10)(DX*1), R11
	LONG $0xc987f6; WORD $0x0; BYTE $0x1	// testb $1, 0xc9(%rdi)	// TESTB $0x1, 0xc9(DI)
	WORD $0x2e75	// jne 0x2ade	// JNE _lbl_2ade
	LONG $0xff3b8349	// cmpq $-1, (%r11)	// CMPQ (R11), $-0x1
	WORD $0x3475	// jne 0x2aea	// JNE _lbl_2aea
	WORD $0xc083; BYTE $0x1	// addl $1, %eax	// ADDL $0x1, AX
	LONG $0x127c8341; WORD $0x8	// cmpl $0, 8(%r10, %rdx)	// CMPL 0x8(R10)(DX*1), $0x0
	WORD $0x8941; BYTE $0x1	// movl %eax, (%r9)	// MOVL AX, (R9)
	WORD $0xbc79	// jns 0x2a80	// JNS _lbl_2a80

_lbl_2ac4:
	LONG $0x6c748; WORD $0x0; BYTE $0x0	// movq $0, (%rsi)	// MOVQ $0x0, (SI)

_lbl_2acb:
	WORD $0xd231	// xorl %edx, %edx	// XORL DX, DX
	LONG $0x1b9; BYTE $0x0	// movl $1, %ecx	// MOVL $0x1, CX
	WORD $0x3145; BYTE $0xc0	// xorl %r8d, %r8d	// XORL R8, R8
	LONG $0xffe3b6e8; BYTE $0xff	// callq 0xe90	// CALL ·__native_entry__+3728(SB)
	WORD $0x9848	// cltq	// 
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 

_lbl_2ade:
	WORD $0x894c; BYTE $0x1e	// movq %r11, (%rsi)	// MOVQ R11, (SI)
	WORD $0x854d; BYTE $0xd2	// testq %r10, %r10	// TESTQ R10, R10
	WORD $0xe574	// je 0x2acb	// JE _lbl_2acb
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 

_lbl_2aea:
	WORD $0x894c; BYTE $0x1e	// movq %r11, (%rsi)	// MOVQ R11, (SI)
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	QUAD $0x841f0f2e66; WORD $0x0	// nopw %cs:(%rax, %rax)	// NOPW (CS)(AX*1)
	LONG $0x441f0f; BYTE $0x0	// nopl (%rax, %rax)	// NOPL (AX)(AX*1)

__subr_IoUringPrepRW__off_11008:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	WORD $0x8840; BYTE $0x3e	// movb %dil, (%rsi)	// MOVB DI, (SI)
	LONG $0x146c6	// movb $0, 1(%rsi)	// MOVB $0x0, 0x1(SI)
	LONG $0x246c766; WORD $0x0	// movw $0, 2(%rsi)	// MOVW $0x0, 0x2(SI)
	WORD $0x5689; BYTE $0x4	// movl %edx, 4(%rsi)	// MOVL DX, 0x4(SI)
	LONG $0x84e894c	// movq %r9, 8(%rsi)	// MOVQ R9, 0x8(SI)
	LONG $0x104e8948	// movq %rcx, 0x10(%rsi)	// MOVQ CX, 0x10(SI)
	LONG $0x18468944	// movl %r8d, 0x18(%rsi)	// MOVL R8, 0x18(SI)
	LONG $0x1c46c7; WORD $0x0; BYTE $0x0	// movl $0, 0x1c(%rsi)	// MOVL $0x0, 0x1c(SI)
	QUAD $0x2846c748	// movq $0, 0x28(%rsi)	// MOVQ $0x0, 0x28(SI)
	LONG $0xc057f8c5	// vxorps %xmm0, %xmm0, %xmm0	// VXORPS X0, X0, X0
	LONG $0x4611f8c5; BYTE $0x30	// vmovups %xmm0, 0x30(%rsi)	// VMOVUPS X0, 0x30(SI)
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 
	LONG $0x441f0f66; WORD $0x0	// nopw (%rax, %rax)	// NOPW (AX)(AX*1)

__subr_IoUringGetSQE__off_11072:
	BYTE $0x55	// pushq %rbp	// PUSHQ BP
	WORD $0x8948; BYTE $0xe5	// movq %rsp, %rbp	// MOVQ SP, BP
	WORD $0x8b48; BYTE $0x7	// movq (%rdi), %rax	// MOVQ (DI), AX
	WORD $0x88b	// movl (%rax), %ecx	// MOVL (AX), CX
	WORD $0x478b; BYTE $0x44	// movl 0x44(%rdi), %eax	// MOVL 0x44(DI), AX
	WORD $0x508d; BYTE $0x1	// leal 1(%rax), %edx	// LEAL 0x1(AX), DX
	WORD $0xd689	// movl %edx, %esi	// MOVL DX, SI
	WORD $0xce29	// subl %ecx, %esi	// SUBL CX, SI
	LONG $0x184f8b48	// movq 0x18(%rdi), %rcx	// MOVQ 0x18(DI), CX
	WORD $0x313b	// cmpl (%rcx), %esi	// CMPL SI, (CX)
	WORD $0x476	// jbe 0x2b5f	// JBE _lbl_2b5f
	WORD $0xc031	// xorl %eax, %eax	// XORL AX, AX
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 

_lbl_2b5f:
	LONG $0xc08f8b; WORD $0x0	// movl 0xc0(%rdi), %ecx	// MOVL 0xc0(DI), CX
	WORD $0xe9c1; BYTE $0xa	// shrl $0xa, %ecx	// SHRL $0xa, CX
	LONG $0x10778b48	// movq 0x10(%rdi), %rsi	// MOVQ 0x10(DI), SI
	WORD $0x623	// andl (%rsi), %eax	// ANDL (SI), AX
	WORD $0xe180; BYTE $0x1	// andb $1, %cl	// ANDB $0x1, CX
	WORD $0xe0d3	// shll %cl, %eax	// SHLL CX, AX
	LONG $0x6e0c148	// shlq $6, %rax	// SHLQ $0x6, AX
	LONG $0x38470348	// addq 0x38(%rdi), %rax	// ADDQ 0x38(DI), AX
	WORD $0x5789; BYTE $0x44	// movl %edx, 0x44(%rdi)	// MOVL DX, 0x44(DI)
	BYTE $0x5d	// popq %rbp	// POPQ BP
	BYTE $0xc3	// retq	// RET 

// data size: 0




TEXT ·IoUringQueueInit(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ 0(SP), R12
	JBE _more_stack

_IoUringQueueInit:
	MOVQ entries+0(FP), DI
	MOVQ ring+8(FP), SI
	MOVQ flags+16(FP), DX
	CALL ·__native_entry__+10768(SB)
	MOVQ AX, ret+24(FP)
	RET

_more_stack:
	CALL runtime·morestack_noctxt<>(SB)
	JMP _entry


TEXT ·IoUringQueueInitParams(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ 0(SP), R12
	JBE _more_stack

_IoUringQueueInitParams:
	MOVQ entries+0(FP), DI
	MOVQ ring+8(FP), SI
	MOVQ params+16(FP), DX
	CALL ·__native_entry__+10784(SB)
	MOVQ AX, ret+24(FP)
	RET

_more_stack:
	CALL runtime·morestack_noctxt<>(SB)
	JMP _entry


TEXT ·IoUringQueueExit(SB), NOSPLIT | NOFRAME, $0 - 16
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ 0(SP), R12
	JBE _more_stack

_IoUringQueueExit:
	MOVQ ring+0(FP), DI
	CALL ·__native_entry__+10800(SB)
	MOVQ AX, ret+8(FP)
	RET

_more_stack:
	CALL runtime·morestack_noctxt<>(SB)
	JMP _entry


TEXT ·IoUringSubmit(SB), NOSPLIT | NOFRAME, $0 - 16
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ 0(SP), R12
	JBE _more_stack

_IoUringSubmit:
	MOVQ ring+0(FP), DI
	CALL ·__native_entry__+10816(SB)
	MOVQ AX, ret+8(FP)
	RET

_more_stack:
	CALL runtime·morestack_noctxt<>(SB)
	JMP _entry


TEXT ·IoUringSubmitAndWait(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ 0(SP), R12
	JBE _more_stack

_IoUringSubmitAndWait:
	MOVQ ring+0(FP), DI
	MOVQ waitNr+8(FP), SI
	CALL ·__native_entry__+10832(SB)
	MOVQ AX, ret+16(FP)
	RET

_more_stack:
	CALL runtime·morestack_noctxt<>(SB)
	JMP _entry


TEXT ·IoUringWaitCQE(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ 0(SP), R12
	JBE _more_stack

_IoUringWaitCQE:
	MOVQ ring+0(FP), DI
	MOVQ cqePtr+8(FP), SI
	CALL ·__native_entry__+10848(SB)
	MOVQ AX, ret+16(FP)
	RET

_more_stack:
	CALL runtime·morestack_noctxt<>(SB)
	JMP _entry


TEXT ·IoUringPrepRW(SB), NOSPLIT | NOFRAME, $0 - 48
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ 0(SP), R12
	JBE _more_stack

_IoUringPrepRW:
	MOVQ op+0(FP), DI
	MOVQ sqe+8(FP), SI
	MOVQ fd+16(FP), DX
	MOVQ addr+24(FP), CX
	MOVQ len+32(FP), R8
	MOVQ offset+40(FP), R9
	LEAQ ·__native_entry__+11008(SB), AX
	JMP AX

_more_stack:
	CALL runtime·morestack_noctxt<>(SB)
	JMP _entry


TEXT ·IoUringGetSQE(SB), NOSPLIT | NOFRAME, $0 - 16
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ 0(SP), R12
	JBE _more_stack

_IoUringGetSQE:
	MOVQ ring+0(FP), DI
	CALL ·__native_entry__+11072(SB)
	MOVQ AX, sqe+8(FP)
	RET

_more_stack:
	CALL runtime·morestack_noctxt<>(SB)
	JMP _entry



